{"version":3,"sources":["components/MqttStatus.js","components/NavBar.js","components/tables/ActionsRow.js","components/tables/MessageRow.js","components/tables/MessageTable.js","components/ConfigActions.js","components/AlertMessage.js","components/dialogs/ConfigDialog.js","components/dialogs/MqttConnectDialog.js","components/inputs/QosSlider.js","components/inputs/TopicTextField.js","components/dialogs/MqttSubscribeDialog.js","components/dialogs/MqttPublishDialog.js","components/dialogs/AppSettingsDialog.js","components/dialogs/DialogWrapper.js","App.js"],"names":["useStyles","makeStyles","theme","title","flexGrow","chipMargin","marginLeft","spacing","successBg","backgroundColor","palette","success","type","color","contrastText","errorBg","error","warningBg","warning","infoBg","info","defaultText","connected","reconnecting","closed","offline","MqttStatus","React","useContext","MqttSettingContext","mqttSetting","MqttContext","mqttState","classes","useTheme","Box","Chip","label","i18n","status","className","url","subscribedTo","topic","avatar","Avatar","qos","formMargin","hideButton","showButton","NavBar","props","hidden","onChange","AppBar","position","Toolbar","Typography","variant","process","FormControlLabel","control","Switch","checked","event","target","useStyles1","root","flexShrink","TablePaginationActions","count","page","rowsPerPage","onChangePage","IconButton","onClick","disabled","aria-label","direction","Math","ceil","max","useStyles2","fontWeight","cursor","text","primary","secondary","ActionsRow","dispatch","onChangeRowsPerPage","rowsPerPageOptions","colSpan","SelectProps","togglePause","TableRow","TableCell","pause","TablePagination","ActionsComponent","useRowStyles","row","borderBottom","MessageRow","columns","collpasedColumns","useState","open","setOpen","Object","keys","length","Fragment","size","map","column","key","Date","toLocaleString","style","paddingBottom","paddingTop","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","component","Table","TableHead","entries","TableBody","container","minHeight","background","default","MessageTable","AppSettingContext","appSetting","setPage","setRowsPerPage","tableColumns","subscribeTo","converter","pageOptions","filtered","filterOn","messages","filter","message","time","getTime","RegExp","test","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","Container","maxWidth","TableContainer","Paper","inputProps","native","reverse","slice","index","TableFooter","speedDial","bottom","right","top","left","connect","disconnect","subscribe","unsubscribe","publish","settings","ConfigActions","handleClose","handleOpenDialog","dialog","actions","icon","name","handler","mqtt","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","action","SpeedDialAction","tooltipTitle","tooltipOpen","width","zIndex","marginTop","alert","boxShadow","shadows","AlertMessage","AlertContext","setAlert","Alert","severity","JSON","stringify","closeBtn","ConfigDialog","contentText","content","buttons","Dialog","fullWidth","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","connectBtn","disconnectBtn","urlLabel","clientIdLabel","anomynousLabel","basicAuthLabel","usernameLabel","passwordLabel","MqttConnectDialog","showPassword","setShowPassword","setMqttSetting","connectDisabled","clientId","anomynous","username","password","handleChange","prop","credentialInputs","TextField","FormControl","InputLabel","htmlFor","endAdornment","InputAdornment","onMouseDown","preventDefault","setting","slider","marks","qosLabel","QosSlider","console","log","Slider","min","step","valueLabelDisplay","labelPlacement","topicLabel","TopicTextField","autoFocus","formControl","minWidth","subscribeBtn","unsubscribeBtn","converterLabel","MqttSubscribeDialog","handleTopicChange","messageConverter","Select","types","textarea","font","boxSizing","publishBtn","messageLabel","messagePlaceholder","MqttPublishDialog","publishTo","TextareaAutosize","placeholder","rowsMin","filterControl","flexDirection","localeLabel","darkModeLabel","lightModeLabel","startTimeLabel","endTimeLabel","filterOnLabel","filterOffLabel","filterKeyLabel","filterTextLabel","langauges","enUS","zhTW","AppSettingsDialog","setAppSetting","clearAlert","handleTimeChange","timeRange","isAfter","set","second","millisecond","isBefore","handleTextChange","textFilter","Autocomplete","options","supportLocales","getOptionLabel","substring","locale","disableClearable","newValue","renderInput","params","darkMode","FormGroup","DateTimePicker","clearable","labelId","MenuItem","DialogWrapper","openDialogs","openConnectDialog","openSubscribeDialog","openPublishDialog","openSettingsDialog","App","hideActionBtn","setHideActionBtn","setOpenConnectDialog","setOpenSubscribeDialog","setOpenPublishDialog"],"mappings":"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","file":"static/js/4.fdfb9258.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    chipMargin: {\r\n        marginLeft: theme.spacing(0.5),\r\n    },\r\n    successBg: {\r\n        backgroundColor: theme.palette.success[theme.palette.type],\r\n        color: theme.palette.success.contrastText\r\n    },\r\n    errorBg: {\r\n        backgroundColor: theme.palette.error[theme.palette.type],\r\n        color: theme.palette.error.contrastText\r\n    },\r\n    warningBg: {\r\n        backgroundColor: theme.palette.warning[theme.palette.type],\r\n        color: theme.palette.warning.contrastText\r\n    },\r\n    infoBg: {\r\n        backgroundColor: theme.palette.info[theme.palette.type],\r\n        color: theme.palette.info.contrastText\r\n    },\r\n}));\r\n\r\nconst defaultText = {\r\n    connected: 'CONNECTED',\r\n    reconnecting: 'RECONNECTING',\r\n    closed: 'CLOSED',\r\n    offline: 'OFFLINE'\r\n}\r\n\r\nexport default function MqttStatus() {\r\n    const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n    const [mqttState, ] = React.useContext(MqttContext);\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    return (\r\n        <Box>\r\n            <Chip \r\n                label={theme.i18n('MqttStatus',mqttState.status, defaultText)}\r\n                className={`\r\n                    ${classes.chipMargin} \r\n                    ${mqttState.status === 'connected' ? \r\n                        classes.successBg : \r\n                        mqttState.status === 'reconnecting' ?\r\n                            classes.warningBg :\r\n                            classes.errorBg \r\n                }`} \r\n                \r\n            />\r\n            {\r\n                mqttState.status === 'connected' ? \r\n                    <Chip \r\n                        label={mqttSetting.url} \r\n                        className={`${classes.chipMargin} ${classes.infoBg}`}\r\n                    /> :\r\n                    null\r\n            }\r\n            {\r\n                mqttState.subscribedTo.topic ? \r\n                    <Chip \r\n                        avatar={<Avatar className={classes.successBg}>{mqttState.subscribedTo.qos}</Avatar>} \r\n                        label={mqttState.subscribedTo.topic} \r\n                        className={`${classes.chipMargin} ${classes.infoBg}`}\r\n                    /> :\r\n                    null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport MqttStatus from 'components/MqttStatus';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    formMargin: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst defaultText = {\r\n    hideButton: 'Hide button',\r\n    showButton: 'Show button'\r\n}\r\n\r\nexport default function NavBar(props) {\r\n    const {\r\n        hidden,\r\n        onChange\r\n    } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    \r\n    const handleHiddenChange = (event) => {\r\n        onChange(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {process.env.REACT_APP_WEBSITE_NAME}\r\n                </Typography>\r\n                <MqttStatus></MqttStatus>\r\n                <FormControlLabel\r\n                    className={classes.formMargin}\r\n                    control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"default\" />}\r\n                    label={ theme.i18n('NavBar',hidden ? 'showButton' : 'hideButton', defaultText)}\r\n                />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  control: {\r\n    fontWeight: 400,\r\n    cursor: 'pointer',\r\n    color: theme.palette.text.primary,\r\n    \"&:hover\": {\r\n      color: theme.palette.text.secondary\r\n    }\r\n  },\r\n}));\r\n\r\nexport default function ActionsRow(props) {\r\n  const classes = useStyles2();\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const { count, page, rowsPerPage, onChangePage, onChangeRowsPerPage, rowsPerPageOptions, colSpan, SelectProps } = props;\r\n\r\n  const togglePause = () => {\r\n    dispatch({type: 'togglePause'});\r\n  }\r\n\r\n  return (\r\n          <TableRow>\r\n            <TableCell>\r\n              { mqttState.pause ? \r\n                <PlayCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/> :\r\n                <PauseCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/>\r\n              }\r\n            </TableCell>\r\n            <TablePagination\r\n              rowsPerPageOptions={rowsPerPageOptions}\r\n              colSpan={colSpan-1}\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={SelectProps}\r\n              onChangePage={onChangePage}\r\n              onChangeRowsPerPage={onChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n    row: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n  }));\r\n  \r\n  \r\nexport default function MessageRow(props) {\r\n    const { columns, collpasedColumns, row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n    const colSpan = Object.keys(columns).length + 1;\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.row}>\r\n          <TableCell>\r\n          { collpasedColumns ?\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          : null}\r\n          </TableCell>\r\n          {Object.keys(columns).map((column) => (\r\n              <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n        { collpasedColumns ? \r\n            <TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={colSpan}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <Box margin={1}>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Metadata\r\n                    </Typography>\r\n                    <Table size=\"small\" aria-label=\"purchases\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {Object.entries(collpasedColumns).map(([key, column]) => (\r\n                            <TableCell key={key}>{column}</TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            {Object.keys(collpasedColumns).map((column) => (\r\n                                <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                    </Table>\r\n                </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n            </TableRow>\r\n        : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport { AppSettingContext, MqttContext, MqttSettingContext } from 'hooks/context/Contexts';\r\nimport ActionsRow from 'components/tables/ActionsRow';\r\nimport MessageRow from 'components/tables/MessageRow';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n  container: {\r\n      paddingTop: theme.spacing(10),\r\n      minHeight: '100vh',\r\n      backgroundColor: theme.palette.background.default \r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  rowsPerPage: 'rows per page'\r\n}\r\n\r\nexport default function MessageTable() {\r\n  const classes = useRowStyles();\r\n  const theme = useTheme();\r\n  const [mqttState, ] = React.useContext(MqttContext);\r\n  const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n  const [appSetting, ] = React.useContext(AppSettingContext);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const tableColumns = columns[mqttSetting.subscribeTo.converter] ? \r\n    columns[mqttSetting.subscribeTo.converter] : \r\n    columns['default'];\r\n  const colSpan = Object.keys(tableColumns).length+1;\r\n  const pageOptions = [10, 25, 50, 100];\r\n  const filtered = appSetting.filterOn ? mqttState.messages.filter((message) => {\r\n    if(appSetting.filter.time[0]){\r\n      let time = new Date(appSetting.filter.time[0]);\r\n      if(message.time < time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.time[1]){\r\n      let time = new Date(appSetting.filter.time[1]);\r\n      if(message.time > time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.text[0] && appSetting.filter.text[1]){\r\n      let regex =  new RegExp(appSetting.filter.text[1], 'i');\r\n      if(!regex.test(message[appSetting.filter.text[0]])) return false;\r\n    }\r\n    return true;\r\n  }) : mqttState.messages;\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"xl\" className={classes.container}>\r\n      <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableHead>\r\n          <TableHead>\r\n            <TableRow>\r\n                <TableCell />\r\n                {Object.entries(tableColumns).map(([key, column]) => (\r\n                    <TableCell key={key}>{column}</TableCell>\r\n                ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n          {filtered.reverse().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n          .map((message, index) => (\r\n              <MessageRow \r\n                key={index} \r\n                row={message}\r\n                columns={tableColumns}\r\n                collpasedColumns={collpasedColumns[mqttSetting.subscribeTo.converter]}\r\n              />\r\n          ))}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\r\nimport RemoveFromQueueIcon from '@material-ui/icons/RemoveFromQueue';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\n\r\nimport 'components/ConfigActions.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  speedDial: {\r\n    position: 'fixed',\r\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n      top: theme.spacing(2),\r\n      left: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  connect: 'Connect',\r\n  disconnect: 'Disconnect',\r\n  subscribe: 'Subscribe',\r\n  unsubscribe: 'Unsubscribe',\r\n  publish: 'Publish',\r\n  settings: 'Settings'\r\n}\r\n\r\nexport default function ConfigActions(props) {\r\n  const {\r\n      hidden,\r\n      onClick\r\n  } = props;\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const theme = useTheme();\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleOpenDialog = (dialog) => () => {\r\n    handleClose();\r\n    onClick(dialog);\r\n  }\r\n\r\n  const handleDisconnect = () =>{\r\n    if(mqttState.status === 'connected') dispatch({type: 'disconnect', dispatch});\r\n  }\r\n\r\n  const handleUnsubscribe = () =>{\r\n    if(mqttState.subscribedTo.topic) dispatch({type: 'unsubscribe', dispatch});\r\n  }\r\n\r\n  const actions = [\r\n    { \r\n        icon: <InputIcon />, \r\n        name: theme.i18n('ConfigActions','connect', defaultText),\r\n        handler: handleOpenDialog('connect'), \r\n        open: true\r\n    },\r\n    { \r\n        icon: <CancelPresentationIcon />, \r\n        name: theme.i18n('ConfigActions','disconnect', defaultText), \r\n        handler: handleDisconnect, \r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <AddToQueueIcon />, \r\n        name: theme.i18n('ConfigActions','subscribe', defaultText), \r\n        handler: handleOpenDialog('subscribe'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <RemoveFromQueueIcon />, \r\n        name: theme.i18n('ConfigActions','unsubscribe', defaultText),\r\n        handler: handleUnsubscribe,\r\n        open: mqttState.subscribedTo.topic && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <PublishIcon />, \r\n        name: theme.i18n('ConfigActions','publish', defaultText),\r\n        handler: handleOpenDialog('publish'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected \r\n    },\r\n    { \r\n        icon: <SettingsIcon />, \r\n        name: theme.i18n('ConfigActions','settings', defaultText),\r\n        handler: handleOpenDialog('settings'),\r\n        open: true\r\n    },\r\n  ];\r\n\r\n  return (\r\n        <SpeedDial\r\n          ariaLabel=\"SpeedDial example\"\r\n          className={`${classes.speedDial} ConfigActions ${hidden ? 'ConfigActions-hide' : ''}`}\r\n          hidden={hidden}\r\n          icon={<SpeedDialIcon />}\r\n          onClose={handleClose}\r\n          onOpen={handleOpen}\r\n          open={open}\r\n          direction=\"up\"\r\n        >\r\n          {actions.map((action) => \r\n            action.open ? (\r\n              <SpeedDialAction\r\n                key={action.name}\r\n                icon={action.icon}\r\n                tooltipTitle={action.name}\r\n                onClick={action.handler}\r\n                tooltipOpen={action.open}\r\n              />\r\n            ) : null\r\n          )}\r\n        </SpeedDial>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    top: theme.spacing(10),\r\n    zIndex: 99999,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  alert: {\r\n    boxShadow: theme.shadows[8]\r\n  }\r\n}));\r\n\r\nexport default function AlertMessage() {\r\n  const classes = useStyles();\r\n  const [alert, setAlert] = React.useContext(AlertContext);\r\n  const handleClose = () => {\r\n    setAlert([])\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {alert.length > 1 ? \r\n        <Alert severity={alert[0]} onClose={handleClose} className={classes.alert}>\r\n          {typeof alert[1] === 'object' && alert[1] !== null && alert[1].message ? alert[1].message : JSON.stringify(alert[1])}\r\n        </Alert>\r\n      : null}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nconst defaultText = {\r\n    closeBtn: 'Close',\r\n}\r\n\r\nexport default function ConfigDialog(props) {\r\n  const {\r\n    open, \r\n    onChange,\r\n    title,\r\n    contentText,\r\n    content,\r\n    buttons} = props;\r\n  const theme = useTheme();\r\n\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"connect-dialog-title\">\r\n        <DialogTitle id=\"connect-dialog-title\">{title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {contentText}\r\n          </DialogContentText>\r\n          {content}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {buttons}\r\n          <Button onClick={handleClose} variant={theme.palette.type === 'dark' ? 'contained' : 'text'}>\r\n            {theme.i18n('ConfigDialog','closeBtn', defaultText)}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\nimport ConfigDialog from 'components/dialogs/ConfigDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  connectBtn: 'Connect',\r\n  disconnectBtn: 'Disconnect',\r\n  title: 'Connect to MQTT',\r\n  contentText: 'Connect to a MQTT server over WebSocket.',\r\n  urlLabel: 'URL',\r\n  clientIdLabel: 'Client ID',\r\n  anomynousLabel: 'Anomynous',\r\n  basicAuthLabel: 'Basic Authentication',\r\n  usernameLabel: 'Username',\r\n  passwordLabel: 'Password'\r\n}\r\n\r\nexport default function MqttConnectDialog(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const {open, onChange} = props;\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const connectDisabled = mqttState.mqtt?.connected || !mqttSetting.url || !mqttSetting.clientId || \r\n    (!mqttSetting.anomynous && (!mqttSetting.username || !mqttSetting.password));\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    dispatch({type: 'connect', setting: mqttSetting});\r\n  }\r\n\r\n  const handlDisconnect = () =>{\r\n    dispatch({type: 'disconnect'});\r\n  }\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      [prop]: event.target.type === 'checkbox' ? event.target.checked : event.target.value \r\n    });\r\n  };\r\n\r\n  const credentialInputs = (\r\n    <>\r\n      <TextField \r\n        fullWidth \r\n        className={classes.margin} \r\n        id=\"mqtt-username\" \r\n        label={theme.i18n('MqttConnectDialog','usernameLabel', defaultText)}\r\n        value={mqttSetting.username}\r\n        onChange={handleChange('username')}\r\n        error={!mqttSetting.username}\r\n      />\r\n      <FormControl fullWidth className={classes.margin}>\r\n        <InputLabel htmlFor=\"standard-adornment-password\" error={!mqttSetting.password}>\r\n          {theme.i18n('MqttConnectDialog','passwordLabel', defaultText)}\r\n        </InputLabel>\r\n        <Input\r\n          id=\"mqtt-password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          value={mqttSetting.password}\r\n          onChange={handleChange('password')}\r\n          error={!mqttSetting.password}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n              >\r\n                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </FormControl>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <ConfigDialog\r\n      open={open}\r\n      onChange={onChange}\r\n      title={theme.i18n('MqttConnectDialog','title', defaultText)}\r\n      contentText={theme.i18n('MqttConnectDialog','contentText', defaultText)}\r\n      content={(\r\n        <>\r\n          <FormControl fullWidth className={classes.margin} error={!mqttSetting.url}>\r\n            <InputLabel htmlFor=\"standard-adornment-amount\">{theme.i18n('MqttConnectDialog','urlLabel', defaultText)}</InputLabel>\r\n            <Input\r\n              id=\"standard-adornment-url\"\r\n              value={mqttSetting.url}\r\n              onChange={handleChange('url')}\r\n              // startAdornment={<InputAdornment position=\"start\">ws://</InputAdornment>}\r\n            />\r\n          </FormControl>\r\n          <TextField \r\n            fullWidth \r\n            className={classes.margin} \r\n            id=\"mqtt-clientId\" \r\n            label={theme.i18n('MqttConnectDialog','clientIdLabel', defaultText)}\r\n            value={mqttSetting.clientId}\r\n            onChange={handleChange('clientId')}\r\n            error={!mqttSetting.clientId}\r\n          />\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={mqttSetting.anomynous}\r\n                  onChange={handleChange('anomynous')}\r\n                  name=\"anomynous\"\r\n                  color=\"secondary\"\r\n                />\r\n              }\r\n              label={theme.i18n('MqttConnectDialog',mqttSetting.anomynous ? 'anomynousLabel' : 'basicAuthLabel', defaultText)}\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          {mqttSetting.anomynous ? null : credentialInputs}\r\n        </>\r\n      )}\r\n      buttons={(\r\n        <>\r\n          <Button \r\n            onClick={handleConnect} \r\n            color=\"primary\" \r\n            disabled={connectDisabled}\r\n            variant={theme.palette.type === 'dark' ? 'contained' : 'text'}\r\n          >\r\n            {theme.i18n('MqttConnectDialog','connectBtn', defaultText)}\r\n          </Button>\r\n          <Button \r\n            onClick={handlDisconnect} \r\n            color=\"primary\" \r\n            disabled={mqttState.status !== 'connected' || !mqttState.mqtt?.connected}\r\n            variant={theme.palette.type === 'dark' ? 'contained' : 'text'}\r\n          >\r\n            {theme.i18n('MqttConnectDialog','disconnectBtn', defaultText)}\r\n          </Button>\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 0,\r\n    label: '0'\r\n  },\r\n  {\r\n    value: 1,\r\n    label: '1'\r\n  },\r\n  {\r\n    value: 2,\r\n    label: '2'\r\n  },\r\n]\r\n\r\nconst defaultText = {\r\n  qosLabel: 'QoS',\r\n}\r\n\r\nexport default function QosSlider(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { value, onChange} = props;\r\n  console.log(value)\r\n  return (\r\n          <FormControlLabel\r\n            control={\r\n              <Slider\r\n                value={value}\r\n                min={0}\r\n                max={2}\r\n                step={1}\r\n                marks={marks}\r\n                valueLabelDisplay=\"off\"\r\n                className={classes.slider} \r\n                onChange={onChange}\r\n              />\r\n            }\r\n            label={theme.i18n('QosSlider','qosLabel', defaultText)}\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  topicLabel: 'Topic',\r\n}\r\n\r\nexport default function TopicTextField(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { value, error, onChange } = props;\r\n\r\n  return (\r\n          <TextField\r\n            autoFocus\r\n            id=\"topic\"\r\n            label={theme.i18n('TopicTextField','topicLabel', defaultText)}\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={onChange}\r\n            value={value}\r\n            error={error}\r\n          />\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport ConfigDialog from 'components/dialogs/ConfigDialog';\r\nimport QosSlider from 'components/inputs/QosSlider';\r\nimport TopicTextField from 'components/inputs/TopicTextField';\r\nimport { MqttSettingContext, MqttContext, AlertContext} from 'hooks/context/Contexts';\r\nimport { types, messageConverter } from 'lib/converter/MessageConverter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: '100%',\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  subscribeBtn: 'Subscribe',\r\n  unsubscribeBtn: 'Unsubscribe',\r\n  title: 'Subscribe',\r\n  contentText: 'Subscribe to a MQTT topic.',\r\n  converterLabel: 'Converter',\r\n}\r\n\r\nexport default function MqttSubscribeDialog(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const [, setAlert, ] = React.useContext(AlertContext);\r\n\r\n  const handleSubscribe = () => {\r\n    if(!messageConverter[mqttSetting.subscribeTo.converter]){\r\n      setAlert(['error','Converter does not exist.']);\r\n      return;\r\n    }\r\n    dispatch({type: 'subscribe', setting: mqttSetting});\r\n  }\r\n\r\n  const handlUnsubscribe = () =>{\r\n    dispatch({type: 'unsubscribe'});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      subscribeTo : {\r\n        ...mqttSetting.subscribeTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n    if(prop === 'converter' && !messageConverter[value]) setAlert(['error', 'Selected converter does not exist.'])\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <ConfigDialog\r\n      open={open}\r\n      onChange={onChange}\r\n      title={theme.i18n('MqttSubscribeDialog','title', defaultText)}\r\n      contentText={theme.i18n('MqttSubscribeDialog','contentText', defaultText)}\r\n      content={(\r\n        <>\r\n          <TopicTextField\r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.subscribeTo.topic}\r\n            error={!mqttSetting.subscribeTo.topic}\r\n          />\r\n          <QosSlider\r\n            value={mqttSetting.subscribeTo.qos}\r\n            onChange={handleTopicChange('qos')}\r\n          />\r\n          <FormControl className={classes.formControl} error={!messageConverter[mqttSetting.subscribeTo.converter]}>\r\n            <InputLabel htmlFor=\"age-native-simple\">{theme.i18n('MqttSubscribeDialog','converterLabel', defaultText)}</InputLabel>\r\n            <Select\r\n              native\r\n              value={mqttSetting.subscribeTo.converter}\r\n              onChange={handleTopicChange('converter')}\r\n              inputProps={{\r\n                name: 'converter',\r\n                id: 'converter',\r\n              }}\r\n            >\r\n              {types.map((type) => (\r\n                <option key={type.value} value={type.value}>{type.label}</option>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </>\r\n      )}\r\n      buttons={(\r\n        <>\r\n          <Button \r\n            onClick={handleSubscribe} \r\n            color=\"primary\" \r\n            disabled={!messageConverter[mqttSetting.subscribeTo.converter] || !mqttSetting.subscribeTo.topic}\r\n            variant={theme.palette.type === 'dark' ? 'contained' : 'text'}\r\n          >\r\n            {theme.i18n('MqttSubscribeDialog','subscribeBtn', defaultText)}\r\n          </Button>\r\n          <Button \r\n            onClick={handlUnsubscribe} \r\n            color=\"primary\" \r\n            disabled={!mqttState.subscribedTo.topic || !mqttState.mqtt.connected}\r\n            variant={theme.palette.type === 'dark' ? 'contained' : 'text'}\r\n          >\r\n            {theme.i18n('MqttSubscribeDialog','unsubscribeBtn', defaultText)}\r\n          </Button>\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\nimport ConfigDialog from 'components/dialogs/ConfigDialog';\r\nimport QosSlider from 'components/inputs/QosSlider';\r\nimport TopicTextField from 'components/inputs/TopicTextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  textarea: {\r\n    font: 'inherit',\r\n    width: '100%',\r\n    marginLeft: theme.spacing(2),\r\n    boxSizing: 'border-box'\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  publishBtn: 'Publish',\r\n  title: 'Publish',\r\n  contentText: 'Publish a MQTT message.',\r\n  messageLabel: 'Message',\r\n  messagePlaceholder: 'Enter a MQTT message'\r\n}\r\n\r\nexport default function MqttPublishDialog(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const handlePublish = () => {\r\n    dispatch({type: 'publish', setting: mqttSetting});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      publishTo : {\r\n        ...mqttSetting.publishTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ConfigDialog\r\n      open={open}\r\n      onChange={onChange}\r\n      title={theme.i18n('MqttPublishDialog','title', defaultText)}\r\n      contentText={theme.i18n('MqttPublishDialog','contentText', defaultText)}\r\n      content={(\r\n        <>\r\n          <TopicTextField\r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.subscribeTo.topic}\r\n            error={!mqttSetting.subscribeTo.topic}\r\n          />\r\n          <QosSlider\r\n            value={mqttSetting.subscribeTo.qos}\r\n            onChange={handleTopicChange('qos')}\r\n          />\r\n          <InputLabel className={classes.margin}  error={!mqttSetting.publishTo.message}>{theme.i18n('MqttPublishDialog','messageLabel', defaultText)}</InputLabel>\r\n          <TextareaAutosize \r\n            error=\"true\"\r\n            aria-label=\"message\" \r\n            placeholder={theme.i18n('MqttPublishDialog','messagePlaceholder', defaultText)} \r\n            rowsMin=\"3\" \r\n            className={classes.textarea}  \r\n            onChange={handleTopicChange('message')}\r\n            value={mqttSetting.publishTo.message}\r\n          />\r\n        </>\r\n      )}\r\n      buttons={(\r\n        <>\r\n          <Button \r\n            onClick={handlePublish} \r\n            color=\"primary\" \r\n            disabled={!mqttState.mqtt?.connected || !mqttSetting.publishTo.topic || !mqttSetting.publishTo.message}\r\n            variant={theme.palette.type === 'dark' ? 'contained' : 'text'}\r\n          >\r\n            {theme.i18n('MqttPublishDialog','publishBtn', defaultText)}\r\n          </Button>\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { AppSettingContext, MqttSettingContext, AlertContext } from 'hooks/context/Contexts';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\nimport ConfigDialog from 'components/dialogs/ConfigDialog';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  filterControl: {\r\n    flexDirection: 'row',\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    }\r\n  },\r\n  formControl: {\r\n    minWidth: '180px',\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  localeLabel: 'Language',\r\n  darkModeLabel: 'Dark Mode',\r\n  lightModeLabel: 'Light Mode',\r\n  startTimeLabel: 'Start Time',\r\n  endTimeLabel: 'End Time',\r\n  filter: 'Filter',\r\n  filterOnLabel: 'Filter On',\r\n  filterOffLabel: 'Filter Off',\r\n  filterKeyLabel: 'Filter Key',\r\n  filterTextLabel: 'Filter Text',\r\n  langauges: {\r\n    enUS: 'English',\r\n    zhTW: '繁體中文'\r\n  },\r\n  title: 'Settings',\r\n  contentText: 'Application settings for MQTT Websocket Client.',\r\n}\r\n\r\n\r\nexport default function AppSettingsDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n  const [appSetting, setAppSetting] = React.useContext(AppSettingContext);\r\n  const [, setAlert, clearAlert] = React.useContext(AlertContext);\r\n  const theme = useTheme();\r\n  const keys = {...(columns[mqttSetting.subscribeTo.converter] ? columns[mqttSetting.subscribeTo.converter] : columns['default']), ...collpasedColumns[mqttSetting.subscribeTo.converter]};\r\n\r\n  const handleTimeChange = (key) => (value) => {\r\n    const timeRange = [...appSetting.filter.time];\r\n    switch(key){\r\n      case 0:\r\n        if(value && appSetting.filter.time[1] && value.isAfter(appSetting.filter.time[1])){\r\n          setAlert(['error','Invalid time range.']);\r\n          clearAlert(2000);\r\n          return;\r\n        }\r\n        if(value) value.set({second:0,millisecond:0})\r\n        timeRange[0] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n      case 1:\r\n        if(value && appSetting.filter.time[0] && value.isBefore(appSetting.filter.time[0])){\r\n          setAlert(['error','Invalid time range.']);\r\n          clearAlert(2000);\r\n          return;\r\n        }\r\n        if(value) value.set({second:59,millisecond:999})\r\n        timeRange[1] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n      default:\r\n        console.log(key);\r\n    }\r\n  }\r\n\r\n  const handleTextChange = (key) => (event, value) => {\r\n    const textFilter = [...appSetting.filter.text];\r\n    switch(key){\r\n      case 0:\r\n        textFilter[0] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n      case 1:\r\n        textFilter[1] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n      default:\r\n        console.log(key);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ConfigDialog\r\n      open={open}\r\n      onChange={onChange}\r\n      title={theme.i18n('AppSettingsDialog','title', defaultText)}\r\n      contentText={theme.i18n('AppSettingsDialog','contentText', defaultText)}\r\n      content={(\r\n        <>\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <Autocomplete\r\n              options={theme.supportLocales}\r\n              getOptionLabel={\r\n                (key) => defaultText.langauges[key] ? \r\n                  defaultText.langauges[key] : \r\n                  `${key.substring(0, 2)}-${key.substring(2, 4)}`\r\n              }\r\n              style={{ width: 300 }}\r\n              value={appSetting.locale}\r\n              disableClearable\r\n              onChange={(event, newValue) => {\r\n                setAppSetting({...appSetting, locale: newValue});\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField \r\n                  {...params} \r\n                  label={theme.i18n('AppSettingsDialog','localeLabel', defaultText)} \r\n                  variant=\"outlined\" \r\n                  fullWidth \r\n                />\r\n              )}\r\n            />\r\n          </FormControl>\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={appSetting.darkMode}\r\n                  onChange={(event, newValue) => {\r\n                    console.log(newValue)\r\n                    setAppSetting({...appSetting, darkMode: newValue});\r\n                  }}\r\n                  name=\"darkMode\"\r\n                  color=\"secondary\"\r\n                />\r\n              }\r\n              label={theme.i18n('AppSettingsDialog', appSetting.darkMode ? 'lightModeLabel' : 'darkModeLabel' , defaultText)}\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          <Typography variant=\"subtitle1\">{theme.i18n('AppSettingsDialog','filter', defaultText)}</Typography>\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={appSetting.filterOn}\r\n                  onChange={(event, newValue) => {\r\n                    console.log(newValue)\r\n                    setAppSetting({...appSetting, filterOn: newValue});\r\n                  }}\r\n                  name=\"filterOn\"\r\n                  color=\"secondary\"\r\n                />\r\n              }\r\n              label={theme.i18n('AppSettingsDialog', appSetting.filterOn ? 'filterOffLabel' : 'filterOnLabel' , defaultText)}\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <DateTimePicker \r\n              label={theme.i18n('AppSettingsDialog','startTimeLabel', defaultText)}\r\n              value={appSetting.filter.time[0]} \r\n              onChange={handleTimeChange(0)} \r\n              error={false}\r\n              clearable\r\n            />\r\n            <DateTimePicker \r\n              label={theme.i18n('AppSettingsDialog','endTimeLabel', defaultText)}\r\n              value={appSetting.filter.time[1]} \r\n              onChange={handleTimeChange(1)} \r\n              error={false}\r\n              clearable\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"filter-key-select-label\">{theme.i18n('AppSettingsDialog','filterKeyLabel', defaultText)}</InputLabel>\r\n              <Select\r\n                labelId=\"filter-key-select-label\"\r\n                id=\"filter-key-select\"\r\n                value={appSetting.filter.text[0]}\r\n                onChange={handleTextChange(0)}\r\n              >\r\n                {Object.entries(keys).map(([key, column]) => (\r\n                  <MenuItem key={key} value={key}>{column}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <TextField \r\n              fullWidth \r\n              id=\"filter-text\" \r\n              label={theme.i18n('AppSettingsDialog','filterTextLabel', defaultText)} \r\n              onChange={handleTextChange(1)}\r\n              value={appSetting.filter.text[1]}\r\n            />\r\n          </FormGroup>\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react'\r\nimport MqttConnectDialog from 'components/dialogs/MqttConnectDialog';\r\nimport MqttSubscribeDialog from 'components/dialogs/MqttSubscribeDialog';\r\nimport MqttPublishDialog from 'components/dialogs/MqttPublishDialog';\r\nimport AppSettingsDialog from 'components/dialogs/AppSettingsDialog';\r\n\r\nexport default function DialogWrapper(props) {\r\n    const {\r\n        open,\r\n        openDialogs\r\n    } = props;\r\n    return (\r\n        <>\r\n            <MqttConnectDialog \r\n                open={open.openConnectDialog}\r\n                onChange={openDialogs.connect}\r\n            />\r\n            <MqttSubscribeDialog \r\n                open={open.openSubscribeDialog}\r\n                onChange={openDialogs.subscribe}\r\n            />\r\n            <MqttPublishDialog \r\n                open={open.openPublishDialog}\r\n                onChange={openDialogs.publish}\r\n            />\r\n            <AppSettingsDialog \r\n                open={open.openSettingsDialog}\r\n                onChange={openDialogs.settings}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from 'components/NavBar';\r\nimport MessageTable from 'components/tables/MessageTable';\r\nimport ConfigActions from 'components/ConfigActions';\r\nimport AlertMessage from 'components/AlertMessage';\r\nimport DialogWrapper from 'components/dialogs/DialogWrapper';\r\n\r\nfunction App() {\r\n  const [hideActionBtn, setHideActionBtn] = React.useState(false);\r\n  const [openConnectDialog, setOpenConnectDialog] = React.useState(false);\r\n  const [openSubscribeDialog, setOpenSubscribeDialog] = React.useState(false);\r\n  const [openPublishDialog, setOpenPublishDialog] = React.useState(false);\r\n  const [openSettingsDialog, setOpenSettingsDialog] = React.useState(false);\r\n\r\n  const openDialogs = {\r\n    connect: setOpenConnectDialog,\r\n    subscribe: setOpenSubscribeDialog,\r\n    publish: setOpenPublishDialog,\r\n    settings: setOpenSettingsDialog\r\n  }\r\n\r\n  const setOpenDialog = (name) => {\r\n    openDialogs[name](true);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <NavBar\r\n        hidden={hideActionBtn}\r\n        onChange={setHideActionBtn}\r\n      />\r\n      <MessageTable></MessageTable>\r\n      <ConfigActions\r\n        hidden={hideActionBtn}\r\n        onClick={setOpenDialog}\r\n      />\r\n      <AlertMessage></AlertMessage>\r\n      <DialogWrapper \r\n        open={{openConnectDialog, openSubscribeDialog, openPublishDialog, openSettingsDialog}}\r\n        openDialogs={openDialogs}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}