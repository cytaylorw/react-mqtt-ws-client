{"version":3,"sources":["components/MqttStatus.js","components/NavBar.js","components/tables/ActionsRow.js","components/tables/MessageRow.js","components/tables/MessageTable.js","components/ConfigActions.js","components/AlertMessage.js","components/dialogs/MqttConnectDialog.js","components/dialogs/MqttSubscribeDialog.js","components/dialogs/MqttPublishDialog.js","components/dialogs/AppSettingsDialog.js","components/dialogs/DialogWrapper.js","App.js"],"names":["MqttStatus","React","useContext","MqttSettingContext","mqttSetting","MqttContext","mqttState","Box","Chip","label","status","toUpperCase","url","subscribedTo","topic","avatar","Avatar","qos","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","props","hidden","onChange","classes","AppBar","position","Toolbar","Typography","variant","className","process","FormControlLabel","control","Switch","checked","event","target","color","useStyles1","flexShrink","marginLeft","TablePaginationActions","useTheme","count","page","rowsPerPage","onChangePage","IconButton","onClick","disabled","aria-label","direction","Math","ceil","max","useStyles2","fontWeight","ActionsRow","useState","dispatch","onChangeRowsPerPage","rowsPerPageOptions","colSpan","SelectProps","togglePause","type","TableRow","TableCell","pause","TablePagination","ActionsComponent","useRowStyles","borderBottom","container","marginTop","MessageRow","columns","collpasedColumns","row","open","setOpen","Object","keys","length","Fragment","size","map","column","key","Date","toLocaleString","style","paddingBottom","paddingTop","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","component","Table","TableHead","entries","TableBody","defaultText","MessageTable","AppSettingContext","appSetting","setPage","setRowsPerPage","tableColumns","subscribeTo","converter","pageOptions","filtered","messages","filter","message","time","getTime","text","RegExp","test","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","Container","maxWidth","TableContainer","Paper","inputProps","i18n","native","reverse","slice","index","TableFooter","transform","configActionsWrapper","height","radioGroup","speedDial","bottom","right","top","left","connect","disconnect","subscribe","unsubscribe","publish","settings","ConfigActions","handleClose","handleOpenDialog","dialog","actions","icon","name","handler","mqtt","connected","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","action","SpeedDialAction","tooltipTitle","tooltipOpen","width","zIndex","alert","boxShadow","shadows","AlertMessage","AlertContext","setAlert","Alert","severity","JSON","stringify","display","flexWrap","withoutLabel","textField","MqttConnectDialog","showPassword","setShowPassword","setMqttSetting","connectDisabled","clientId","anomynous","username","password","handleChange","prop","console","log","credentialInputs","TextField","fullWidth","id","error","FormControl","InputLabel","htmlFor","endAdornment","InputAdornment","onMouseDown","preventDefault","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","setting","slider","formControl","minWidth","MqttSubscribeDialog","handleTopicChange","messageConverter","autoFocus","Slider","defaultValue","min","step","marks","valueLabelDisplay","labelPlacement","Select","types","textarea","font","boxSizing","MqttPublishDialog","publishTo","TextareaAutosize","placeholder","rowsMin","toText","filterControl","flexDirection","localeLabel","startTimeLabel","endTimeLabel","toLabel","AppSettingsDialog","setAppSetting","handleTimeChange","timeRange","isAfter","set","second","millisecond","isBefore","handleTextChange","textFilter","Autocomplete","options","supportLocales","getOptionLabel","substring","locale","disableClearable","newValue","renderInput","params","FormGroup","DateTimePicker","clearable","labelId","MenuItem","DialogWrapper","openDialogs","openConnectDialog","openSubscribeDialog","openPublishDialog","openSettingsDialog","App","hideActionBtn","setHideActionBtn","setOpenConnectDialog","setOpenSubscribeDialog","setOpenPublishDialog"],"mappings":"mTAMe,SAASA,IAAc,IAAD,EACKC,IAAMC,WAAWC,KADtB,mBAC1BC,EAD0B,aAEHH,IAAMC,WAAWG,MAFd,mBAE1BC,EAF0B,UAKjC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,MAAK,UAAKH,EAAUI,OAAOC,eAAtB,OAA2D,cAArBL,EAAUI,OAAV,cAA0CN,EAAYQ,KAAQ,MAG3GN,EAAUO,aAAaC,MACnB,kBAACN,EAAA,EAAD,CAAMO,OAAQ,kBAACC,EAAA,EAAD,KAASV,EAAUO,aAAaI,KAAeR,MAAOH,EAAUO,aAAaC,QAC3F,MCJpB,IAAMI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAID,SAASK,EAAOC,GAAQ,IAE/BC,EAEAD,EAFAC,OACAC,EACAF,EADAE,SAEEC,EAAUb,IAOhB,OACI,kBAACc,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KAII,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWN,EAAQL,OACvCY,kBAEL,kBAACtC,EAAD,MACA,kBAACuC,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAQC,QAASb,EAAQC,SAfvB,SAACa,GACxBb,EAASa,EAAMC,OAAOF,UAcsDG,MAAM,YACtEpC,MAAM,kB,4NC9BpBqC,EAAa3B,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACJ0B,WAAY,EACZC,WAAY5B,EAAMK,QAAQ,UAI9B,SAASwB,EAAuBrB,GAC9B,IAAMG,EAAUe,IACV1B,EAAQ8B,cACNC,EAA2CvB,EAA3CuB,MAAOC,EAAoCxB,EAApCwB,KAAMC,EAA8BzB,EAA9ByB,YAAaC,EAAiB1B,EAAjB0B,aAkBlC,OACE,yBAAKjB,UAAWN,EAAQV,MACtB,kBAACkC,EAAA,EAAD,CACEC,QAnB6B,SAACb,GAClCW,EAAaX,EAAO,IAmBhBc,SAAmB,IAATL,EACVM,aAAW,cAEU,QAApBtC,EAAMuC,UAAsB,kBAAC,IAAD,MAAmB,kBAAC,IAAD,OAElD,kBAACJ,EAAA,EAAD,CAAYC,QArBc,SAACb,GAC7BW,EAAaX,EAAOS,EAAO,IAoBmBK,SAAmB,IAATL,EAAYM,aAAW,iBACtD,QAApBtC,EAAMuC,UAAsB,kBAAC,IAAD,MAAyB,kBAAC,IAAD,OAExD,kBAACJ,EAAA,EAAD,CACEC,QArBwB,SAACb,GAC7BW,EAAaX,EAAOS,EAAO,IAqBvBK,SAAUL,GAAQQ,KAAKC,KAAKV,EAAQE,GAAe,EACnDK,aAAW,aAEU,QAApBtC,EAAMuC,UAAsB,kBAAC,IAAD,MAAwB,kBAAC,IAAD,OAEvD,kBAACJ,EAAA,EAAD,CACEC,QAxB4B,SAACb,GACjCW,EAAaX,EAAOiB,KAAKE,IAAI,EAAGF,KAAKC,KAAKV,EAAQE,GAAe,KAwB7DI,SAAUL,GAAQQ,KAAKC,KAAKV,EAAQE,GAAe,EACnDK,aAAW,aAEU,QAApBtC,EAAMuC,UAAsB,kBAAC,IAAD,MAAoB,kBAAC,IAAD,QAiCzD,IAAMI,EAAa5C,aAAW,SAACC,GAAD,MAAY,CACxCoB,QAAS,CACPwB,WAAY,SAID,SAASC,EAAWrC,GACjC,IAAMG,EAAUgC,IADwB,EAEd9D,IAAMiE,UAAS,GAFD,gCAGVjE,IAAMC,WAAWG,MAHP,mBAGjCC,EAHiC,KAGtB6D,EAHsB,KAMhChB,EAA0GvB,EAA1GuB,MAAOC,EAAmGxB,EAAnGwB,KAAMC,EAA6FzB,EAA7FyB,YAAaC,EAAgF1B,EAAhF0B,aAAcc,EAAkExC,EAAlEwC,oBAAqBC,EAA6CzC,EAA7CyC,mBAAoBC,EAAyB1C,EAAzB0C,QAASC,EAAgB3C,EAAhB2C,YAS5FC,EAAc,WAElBL,EAAS,CAACM,KAAM,iBAGlB,OACQ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACIrE,EAAUsE,MACV,kBAAC,IAAD,CAAuBpB,QAASgB,EAAanC,UAAS,0BAAqBN,EAAQS,WACnF,kBAAC,IAAD,CAAwBgB,QAASgB,EAAanC,UAAS,0BAAqBN,EAAQS,YAGxF,kBAACqC,EAAA,EAAD,CACER,mBAAoBA,EACpBC,QAASA,EAAQ,EACjBnB,MAAOA,EACPE,YAAaA,EACbD,KAAMA,EACNmB,YAAaA,EACbjB,aAAcA,EACdc,oBAAqBA,EACrBU,iBAAkB7B,K,iDCjI1B8B,EAAe5D,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACJ,QAAS,CACP2D,aAAc,UAGlBC,UAAW,CACPC,UAAW9D,EAAMK,QAAQ,QAKlB,SAAS0D,EAAWvD,GAAQ,IAC/BwD,EAAmCxD,EAAnCwD,QAASC,EAA0BzD,EAA1ByD,iBAAkBC,EAAQ1D,EAAR0D,IADG,EAEdrF,IAAMiE,UAAS,GAFD,mBAE/BqB,EAF+B,KAEzBC,EAFyB,KAGhCzD,EAAUgD,IAEVT,EAAUmB,OAAOC,KAAKN,GAASO,OAAS,EAE9C,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAClB,EAAA,EAAD,CAAUrC,UAAWN,EAAQV,MAC3B,kBAACsD,EAAA,EAAD,KACEU,EACA,kBAAC9B,EAAA,EAAD,CAAYG,aAAW,aAAamC,KAAK,QAAQrC,QAAS,kBAAMgC,GAASD,KACtEA,EAAO,kBAAC,IAAD,MAA0B,kBAAC,IAAD,OAEpC,MAEDE,OAAOC,KAAKN,GAASU,KAAI,SAACC,GAAD,OACtB,kBAACpB,EAAA,EAAD,CAAWqB,IAAKD,GAAoB,SAAXA,EAAoB,IAAIE,KAAKX,EAAIS,IAASG,iBAAmBZ,EAAIS,QAG9FV,EACE,kBAACX,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWwB,MAAO,CAAEC,cAAe,EAAGC,WAAY,GAAK/B,QAASA,GAC5D,kBAACgC,EAAA,EAAD,CAAUC,GAAIhB,EAAMiB,QAAQ,OAAOC,eAAa,GAChD,kBAAClG,EAAA,EAAD,CAAKmG,OAAQ,GACT,kBAACvE,EAAA,EAAD,CAAYC,QAAQ,KAAKuE,cAAY,EAACC,UAAU,OAAhD,YAGA,kBAACC,EAAA,EAAD,CAAOhB,KAAK,QAAQnC,aAAW,aAC/B,kBAACoD,EAAA,EAAD,KACI,kBAACpC,EAAA,EAAD,KACCe,OAAOsB,QAAQ1B,GAAkBS,KAAI,mCAAEE,EAAF,KAAOD,EAAP,YAClC,kBAACpB,EAAA,EAAD,CAAWqB,IAAKA,GAAMD,QAI9B,kBAACiB,EAAA,EAAD,KACI,kBAACtC,EAAA,EAAD,KACKe,OAAOC,KAAKL,GAAkBS,KAAI,SAACC,GAAD,OAC/B,kBAACpB,EAAA,EAAD,CAAWqB,IAAKD,GAAoB,SAAXA,EAAoB,IAAIE,KAAKX,EAAIS,IAASG,iBAAmBZ,EAAIS,cAShH,M,aCzDJhB,GAAe5D,aAAW,SAACC,GAAD,MAAY,CAC1CC,KAAM,CACJ,QAAS,CACP2D,aAAc,UAGlBC,UAAW,CACPC,UAAW9D,EAAMK,QAAQ,QAIzBwF,GAAc,CAClB5D,YAAa,iBAGA,SAAS6D,KACtB,IAAMnF,EAAUgD,KACV3D,EAAQ8B,cAFuB,EAGPjD,IAAMC,WAAWG,KAHV,mBAG9BC,EAH8B,aAICL,IAAMC,WAAWC,MAJlB,mBAI9BC,EAJ8B,aAKDH,IAAMC,WAAWiH,MALhB,mBAK9BC,EAL8B,aAMbnH,IAAMiE,SAAS,IANF,mBAM9Bd,EAN8B,KAMxBiE,EANwB,OAOCpH,IAAMiE,SAAS,IAPhB,mBAO9Bb,EAP8B,KAOjBiE,EAPiB,KAS/BC,EAAenC,KAAQhF,EAAYoH,YAAYC,WACnDrC,KAAQhF,EAAYoH,YAAYC,WAChCrC,KAAO,QACHd,EAAUmB,OAAOC,KAAK6B,GAAc5B,OAAO,EAC3C+B,EAAc,CAAC,GAAI,GAAI,GAAI,KAC3BC,EAAWrH,EAAUsH,SAASC,QAAO,SAACC,GAC1C,GAAGV,EAAWS,OAAOE,KAAK,GAAG,CAC3B,IAAIA,EAAO,IAAI9B,KAAKmB,EAAWS,OAAOE,KAAK,IAE3C,GAAGD,EAAQC,KAAOA,EAAKC,UAAW,OAAO,EAE3C,GAAGZ,EAAWS,OAAOE,KAAK,GAAG,CAC3B,IAAIA,EAAO,IAAI9B,KAAKmB,EAAWS,OAAOE,KAAK,IAE3C,GAAGD,EAAQC,KAAOA,EAAKC,UAAW,OAAO,EAE3C,GAAGZ,EAAWS,OAAOI,KAAK,IAAMb,EAAWS,OAAOI,KAAK,KACxC,IAAIC,OAAOd,EAAWS,OAAOI,KAAK,GAAI,KACzCE,KAAKL,EAAQV,EAAWS,OAAOI,KAAK,KAAM,OAAO,EAE7D,OAAO,KAEHG,EAAmB,SAACzF,EAAO0F,GAC/BhB,EAAQgB,IAGJC,EAA0B,SAAC3F,GAC/B2E,EAAeiB,SAAS5F,EAAMC,OAAO4F,MAAO,KAC5CnB,EAAQ,IAEV,OACE,kBAACoB,EAAA,EAAD,CAAWC,SAAS,KAAKrG,UAAWN,EAAQkD,WACxC,kBAAC0D,EAAA,EAAD,CAAgB/B,UAAWgC,KAC3B,kBAAC/B,EAAA,EAAD,CAAOhB,KAAK,QAAQnC,aAAW,qBAC/B,kBAACoD,EAAA,EAAD,KACI,kBAAC7C,EAAD,CACEI,mBAAoBqD,EACpBpD,QAASA,EACTnB,MAAO7C,EAAUsH,SAASjC,OAC1BtC,YAAaA,EACbD,KAAMA,EACNmB,YAAa,CACXsE,WAAY,CAAE,aAAczH,EAAM0H,KAAK,eAAe,cAAe7B,KACrE8B,QAAQ,GAEVzF,aAAc8E,EACdhE,oBAAqBkE,KAGzB,kBAACxB,EAAA,EAAD,KACE,kBAACpC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACCc,OAAOsB,QAAQQ,GAAczB,KAAI,mCAAEE,EAAF,KAAOD,EAAP,YAC9B,kBAACpB,EAAA,EAAD,CAAWqB,IAAKA,GAAMD,QAQhC,kBAACiB,EAAA,EAAD,KACCW,EAASqB,UAAUC,MAAM7F,EAAOC,EAAaD,EAAOC,EAAcA,GAAayC,KAAI,SAACgC,EAASoB,GAAV,OAChF,kBAAC/D,EAAD,CACEa,IAAKkD,EACL5D,IAAKwC,EACL1C,QAASmC,EACTlC,iBAAkBA,KAAiBjF,EAAYoH,YAAYC,iBAIjE,kBAAC0B,EAAA,EAAD,KACE,kBAAClF,EAAD,CACEI,mBAAoBqD,EACpBpD,QAASA,EACTnB,MAAO7C,EAAUsH,SAASjC,OAC1BtC,YAAaA,EACbD,KAAMA,EACNmB,YAAa,CACXsE,WAAY,CAAE,aAAczH,EAAM0H,KAAK,eAAe,cAAe7B,KACrE8B,QAAQ,GAEVzF,aAAc8E,EACdhE,oBAAqBkE,Q,gKC5G7BpH,I,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ+H,UAAW,kBACX9H,SAAU,GAEZ+H,qBAAsB,CACpBpH,SAAU,WACViD,UAAW9D,EAAMK,QAAQ,GACzB6H,OAAQ,KAEVC,WAAY,CACV7C,OAAQtF,EAAMK,QAAQ,EAAG,IAE3B+H,UAAW,CACTvH,SAAU,QACV,2DAA4D,CAC1DwH,OAAQrI,EAAMK,QAAQ,GACtBiI,MAAOtI,EAAMK,QAAQ,IAEvB,8DAA+D,CAC7DkI,IAAKvI,EAAMK,QAAQ,GACnBmI,KAAMxI,EAAMK,QAAQ,UAKpBwF,GAAc,CAClB4C,QAAS,UACTC,WAAY,aACZC,UAAW,YACXC,YAAa,cACbC,QAAS,UACTC,SAAU,YAGG,SAASC,GAAcvI,GAAQ,IAExCC,EAEAD,EAFAC,OACA2B,EACA5B,EADA4B,QAEEzB,EAAUb,KAL2B,EAMnBjB,IAAMiE,UAAS,GANI,mBAMpCqB,EANoC,KAM9BC,EAN8B,OAQbvF,IAAMC,WAAWG,KARJ,mBAQpCC,EARoC,KAQzB6D,EARyB,KASrC/C,EAAQ8B,cAGRkH,EAAc,WAClB5E,GAAQ,IAOJ6E,EAAmB,SAACC,GAAD,OAAY,WACnCF,IACA5G,EAAQ8G,KAWJC,EAAU,CACd,CACIC,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,aAAa,UAAW7B,IACzCyD,QAASL,EAAiB,WAC1B9E,MAAM,GAEV,CACIiF,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,aAAa,aAAc7B,IAC5CyD,QAlBmB,WACC,cAArBpK,EAAUI,QAAwByD,EAAS,CAACM,KAAM,aAAcN,cAkB/DoB,KAA2B,cAArBjF,EAAUI,QAA0BJ,EAAUqK,KAAKC,WAE7D,CACIJ,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,aAAa,YAAa7B,IAC3CyD,QAASL,EAAiB,aAC1B9E,KAA2B,cAArBjF,EAAUI,QAA0BJ,EAAUqK,KAAKC,WAE7D,CACIJ,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,aAAa,cAAe7B,IAC7CyD,QA1BoB,WACrBpK,EAAUO,aAAaC,OAAOqD,EAAS,CAACM,KAAM,cAAeN,cA0B5DoB,KAAMjF,EAAUO,aAAaC,OAASR,EAAUqK,KAAKC,WAEzD,CACIJ,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,aAAa,UAAW7B,IACzCyD,QAASL,EAAiB,WAC1B9E,KAA2B,cAArBjF,EAAUI,QAA0BJ,EAAUqK,KAAKC,WAE7D,CACIJ,KAAM,kBAAC,KAAD,MACNC,KAAMrJ,EAAM0H,KAAK,mBAAmB,WAAY7B,IAChDyD,QAASL,EAAiB,YAC1B9E,MAAM,IAIZ,OACM,kBAACsF,GAAA,EAAD,CACEC,UAAU,oBACVzI,UAAS,UAAKN,EAAQyH,UAAb,0BAAwC3H,EAAS,qBAAuB,IACjFA,OAAQA,EACR2I,KAAM,kBAACO,GAAA,EAAD,MAENC,QAASZ,EACTa,OAhEW,WACjBzF,GAAQ,IAgEFD,KAAMA,EACN5B,UAAU,MAET4G,EAAQzE,KAAI,SAACoF,GACZ,GAAGA,EAAO3F,KAAM,OACd,kBAAC4F,GAAA,EAAD,CACEnF,IAAKkF,EAAOT,KACZD,KAAMU,EAAOV,KACbY,aAAcF,EAAOT,KACrBjH,QAAS0H,EAAOR,QAChBW,YAAaH,EAAO3F,W,cC/I9BrE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJiK,MAAO,OACPrJ,SAAU,QACV0H,IAAKvI,EAAMK,QAAQ,IACnB8J,OAAQ,MAGR,YAAa,CACXrG,UAAW9D,EAAMK,QAAQ,KAG7B+J,MAAO,CACLC,UAAWrK,EAAMsK,QAAQ,QAId,SAASC,KACtB,IAAM5J,EAAUb,KADqB,EAGXjB,IAAMC,WAAW0L,KAHN,mBAG9BJ,EAH8B,KAGvBK,EAHuB,KASrC,OACE,yBAAKxJ,UAAWN,EAAQV,MACrBmK,EAAM7F,OAAS,EACd,kBAACmG,GAAA,EAAD,CAAOC,SAAUP,EAAM,GAAIR,QAPb,WAClBa,EAAS,KAM4CxJ,UAAWN,EAAQyJ,OAC7C,kBAAbA,EAAM,IAAgC,OAAbA,EAAM,IAAeA,EAAM,GAAG1D,QAAU0D,EAAM,GAAG1D,QAAUkE,KAAKC,UAAUT,EAAM,KAEnH,M,sLCbFtK,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ6K,QAAS,OACTC,SAAU,QAEZzF,OAAQ,CACNA,OAAQtF,EAAMK,QAAQ,IAExB2K,aAAc,CACZlH,UAAW9D,EAAMK,QAAQ,IAE3B4K,UAAW,CACTf,MAAO,YAKI,SAASgB,GAAkB1K,GAAQ,IAAD,IACzCG,EAAUb,KACTqE,EAAkB3D,EAAlB2D,KAAMzD,EAAYF,EAAZE,SAFkC,EAGP7B,IAAMiE,UAAS,GAHR,mBAGxCqI,EAHwC,KAG1BC,EAH0B,OAITvM,IAAMC,WAAWC,KAJR,mBAIxCC,EAJwC,KAI3BqM,EAJ2B,OAKjBxM,IAAMC,WAAWG,KALA,mBAKxCC,EALwC,KAK7B6D,EAL6B,KAOzCuI,GAAkB,UAAApM,EAAUqK,YAAV,eAAgBC,aAAcxK,EAAYQ,MAAQR,EAAYuM,WAClFvM,EAAYwM,aAAexM,EAAYyM,WAAazM,EAAY0M,UAM9D1C,EAAc,WAElBtI,GAAS,IAmBLiL,EAAe,SAACC,GAAD,OAAU,SAACrK,GAC9BsK,QAAQC,IAAIvK,EAAMC,OAAOF,SACzB+J,EAAe,gBACVrM,EADS,gBAEX4M,EAA6B,aAAtBrK,EAAMC,OAAO6B,KAAsB9B,EAAMC,OAAOF,QAAUC,EAAMC,OAAO4F,WAI7E2E,EACJ,oCACE,kBAACC,GAAA,EAAD,CACEC,WAAS,EACThL,UAAWN,EAAQ2E,OACnB4G,GAAG,gBACH7M,MAAM,WACN+H,MAAOpI,EAAYyM,SACnB/K,SAAUiL,EAAa,YACvBQ,OAAQnN,EAAYyM,WAEtB,kBAACW,GAAA,EAAD,CAAaH,WAAS,EAAChL,UAAWN,EAAQ2E,QACxC,kBAAC+G,GAAA,EAAD,CAAYC,QAAQ,8BAA8BH,OAAQnN,EAAY0M,UAAtE,YACA,kBAAC,KAAD,CACEQ,GAAG,8BACH7I,KAAM8H,EAAe,OAAS,WAC9B/D,MAAOpI,EAAY0M,SACnBhL,SAAUiL,EAAa,YACvBQ,OAAQnN,EAAY0M,SACpBa,aACE,kBAACC,GAAA,EAAD,CAAgB3L,SAAS,OACvB,kBAACsB,EAAA,EAAD,CACEG,aAAW,6BACXF,QA/CkB,WAC9BgJ,GAAiBD,IA+CLsB,YA5CkB,SAAClL,GAC/BA,EAAMmL,mBA6COvB,EAAe,kBAAC,KAAD,MAAiB,kBAAC,KAAD,YAS/C,OACI,kBAACwB,GAAA,EAAD,CAAQV,WAAS,EAAC9H,KAAMA,EAAMyF,QAASZ,EAAa4D,kBAAgB,wBAClE,kBAACC,GAAA,EAAD,CAAaX,GAAG,wBAAhB,mBACA,kBAACY,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,iDAGA,kBAACX,GAAA,EAAD,CAAaH,WAAS,EAAChL,UAAWN,EAAQ2E,OAAQ6G,OAAQnN,EAAYQ,KACpE,kBAAC6M,GAAA,EAAD,CAAYC,QAAQ,6BAApB,OACA,kBAAC,KAAD,CACEJ,GAAG,yBACH9E,MAAOpI,EAAYQ,IACnBkB,SAAUiL,EAAa,UAI3B,kBAACK,GAAA,EAAD,CACEC,WAAS,EACThL,UAAWN,EAAQ2E,OACnB4G,GAAG,gBACH7M,MAAM,YACN+H,MAAOpI,EAAYuM,SACnB7K,SAAUiL,EAAa,YACvBQ,OAAQnN,EAAYuM,WAEtB,kBAACa,GAAA,EAAD,CAAaH,WAAS,EAAChL,UAAWN,EAAQ2E,QACxC,kBAACnE,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAAStC,EAAYwM,UACrB9K,SAAUiL,EAAa,aACvBtC,KAAK,YACL5H,MAAM,YAGVpC,MAAM,eAITL,EAAYwM,UAAY,KAAOO,GAElC,kBAACiB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ7K,QAAS4G,EAAavH,MAAM,WAApC,SAGA,kBAACwL,GAAA,EAAD,CAAQ7K,QA5FQ,WACtBW,EAAS,CAACM,KAAM,gBA2FwB5B,MAAM,UAAUY,SAA+B,cAArBnD,EAAUI,UAA0B,UAACJ,EAAUqK,YAAX,aAAC,EAAgBC,YAAjH,cAGA,kBAACyD,GAAA,EAAD,CAAQ7K,QAnGM,WACpBW,EAAS,CAACM,KAAM,UAAW6J,QAASlO,KAkGEyC,MAAM,UAAUY,SAAUiJ,GAA1D,a,wBCpJJxL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ6K,QAAS,OACTC,SAAU,QAEZzF,OAAQ,CACNA,OAAQtF,EAAMK,QAAQ,IAExB2K,aAAc,CACZlH,UAAW9D,EAAMK,QAAQ,IAE3B4K,UAAW,CACTf,MAAO,QAETiD,OAAQ,CACNjD,MAAO,QACPtI,WAAY5B,EAAMK,QAAQ,IAE5B+M,YAAa,CACX9H,OAAQtF,EAAMK,QAAQ,GACtBgN,SAAU,YAIC,SAASC,GAAoB9M,GAC1C,IAAMG,EAAUb,KACTqE,EAAkB3D,EAAlB2D,KAAMzD,EAAYF,EAAZE,SAFoC,EAIX7B,IAAMC,WAAWC,KAJN,mBAI1CC,EAJ0C,KAI7BqM,EAJ6B,OAKnBxM,IAAMC,WAAWG,KALE,mBAK1CC,EAL0C,KAK/B6D,EAL+B,OAMXlE,IAAMC,WAAW0L,KANN,mBAMnCC,GANmC,WAY3CzB,GAZ2C,KAY7B,WAElBtI,GAAS,KAeL6M,EAAoB,SAAC3B,GAAD,OAAU,SAACrK,EAAO6F,GAK1CiE,EAAe,gBACVrM,EADS,CAEZoH,YAAW,gBACNpH,EAAYoH,YADN,gBAERwF,EAAwB,qBAAVxE,EAAwB7F,EAAMC,OAAO4F,MAAQA,QAE7DwE,GAAuB4B,KAAiBpG,KAAQqD,EAAS,CAAC,QAAS,yCAkBxE,OACI,kBAACkC,GAAA,EAAD,CAAQV,WAAS,EAAC9H,KAAMA,EAAMyF,QAASZ,EAAa4D,kBAAgB,0BAClE,kBAACC,GAAA,EAAD,CAAaX,GAAG,0BAAhB,aACA,kBAACY,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,mCAGA,kBAACf,GAAA,EAAD,CACEyB,WAAS,EACTvB,GAAG,QACH7M,MAAM,QACNgE,KAAK,OACL4I,WAAS,EACThL,UAAWN,EAAQ2E,OACnB5E,SAAU6M,EAAkB,SAC5BnG,MAAOpI,EAAYoH,YAAY1G,MAC/ByM,OAAQnN,EAAYoH,YAAY1G,QAElC,kBAACyB,EAAA,EAAD,CACEC,QACE,kBAACsM,GAAA,EAAD,CACEC,aAAc3O,EAAYoH,YAAYvG,IACtC+N,IAAK,EACLlL,IAAK,EAELkK,kBAAgB,yBAChBiB,KAAM,EACNC,MA1CA,CACZ,CACE1G,MAAO,EACP/H,MAAO,KAET,CACE+H,MAAO,EACP/H,MAAO,KAET,CACE+H,MAAO,EACP/H,MAAO,MAgCG0O,kBAAkB,MAClB9M,UAAWN,EAAQwM,OACnBzM,SAAU6M,EAAkB,SAGhClO,MAAM,MACN2O,eAAe,QACf/M,UAAWN,EAAQ2E,SAErB,kBAAC8G,GAAA,EAAD,CAAanL,UAAWN,EAAQyM,YAAajB,OAAQqB,KAAiBxO,EAAYoH,YAAYC,YAC5F,kBAACgG,GAAA,EAAD,CAAYC,QAAQ,qBAApB,aACA,kBAAC2B,GAAA,EAAD,CACEtG,QAAM,EACNP,MAAOpI,EAAYoH,YAAYC,UAC/B3F,SAAU6M,EAAkB,aAC5B9F,WAAY,CACV4B,KAAM,YACN6C,GAAI,cAILgC,KAAMxJ,KAAI,SAACrB,GAAD,OACT,4BAAQuB,IAAKvB,EAAK+D,MAAOA,MAAO/D,EAAK+D,OAAQ/D,EAAKhE,aAK1D,kBAAC2N,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ7K,QAAS4G,EAAavH,MAAM,WAApC,SAGA,kBAACwL,GAAA,EAAD,CAAQ7K,QA5FS,WACvBW,EAAS,CAACM,KAAM,iBA2FyB5B,MAAM,UAAUY,UAAWnD,EAAUO,aAAaC,QAAUR,EAAUqK,KAAKC,WAA9G,eAGA,kBAACyD,GAAA,EAAD,CAAQ7K,QAvGQ,WAClBoL,KAAiBxO,EAAYoH,YAAYC,WAI7CtD,EAAS,CAACM,KAAM,YAAa6J,QAASlO,IAHpCyL,EAAS,CAAC,QAAQ,+BAqGoBhJ,MAAM,UAAUY,UAAWmL,KAAiBxO,EAAYoH,YAAYC,aAAerH,EAAYoH,YAAY1G,OAA7I,e,cClJJI,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ6K,QAAS,OACTC,SAAU,QAEZzF,OAAQ,CACNA,OAAQtF,EAAMK,QAAQ,IAExB2K,aAAc,CACZlH,UAAW9D,EAAMK,QAAQ,IAE3B4K,UAAW,CACTf,MAAO,QAETiD,OAAQ,CACNjD,MAAO,QACPtI,WAAY5B,EAAMK,QAAQ,IAE5B8N,SAAU,CACRC,KAAM,UACNlE,MAAO,OACPtI,WAAY5B,EAAMK,QAAQ,GAC1BgO,UAAW,kBAIA,SAASC,GAAkB9N,GAAQ,IAAD,EACzCG,EAAUb,KACTqE,EAAkB3D,EAAlB2D,KAAMzD,EAAYF,EAAZE,SAFkC,EAIT7B,IAAMC,WAAWC,KAJR,mBAIxCC,EAJwC,KAI3BqM,EAJ2B,OAKjBxM,IAAMC,WAAWG,KALA,mBAKxCC,EALwC,KAK7B6D,EAL6B,KAWzCiG,EAAc,WAElBtI,GAAS,IAcL6M,EAAoB,SAAC3B,GAAD,OAAU,SAACrK,EAAO6F,GAK1CiE,EAAe,gBACVrM,EADS,CAEZuP,UAAS,gBACJvP,EAAYuP,UADR,gBAEN3C,EAAwB,qBAAVxE,EAAwB7F,EAAMC,OAAO4F,MAAQA,SAmBlE,OACI,kBAACuF,GAAA,EAAD,CAAQV,WAAS,EAAC9H,KAAMA,EAAMyF,QAASZ,EAAa4D,kBAAgB,wBAClE,kBAACC,GAAA,EAAD,CAAaX,GAAG,wBAAhB,WACA,kBAACY,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,iCAGA,kBAACf,GAAA,EAAD,CACEG,OAAQnN,EAAYuP,UAAU7O,MAC9B+N,WAAS,EACTvB,GAAG,QACH7M,MAAM,QACNgE,KAAK,OACL4I,WAAS,EACThL,UAAWN,EAAQ2E,OACnB5E,SAAU6M,EAAkB,SAC5BnG,MAAOpI,EAAYuP,UAAU7O,QAE/B,kBAACyB,EAAA,EAAD,CACEC,QACE,kBAACsM,GAAA,EAAD,CACEC,aAAc3O,EAAYuP,UAAU1O,IACpC+N,IAAK,EACLlL,IAAK,EAELkK,kBAAgB,yBAChBiB,KAAM,EACNC,MA1CA,CACZ,CACE1G,MAAO,EACP/H,MAAO,KAET,CACE+H,MAAO,EACP/H,MAAO,KAET,CACE+H,MAAO,EACP/H,MAAO,MAgCG0O,kBAAkB,MAClB9M,UAAWN,EAAQwM,OACnBzM,SAAU6M,EAAkB,SAGhClO,MAAM,MACN2O,eAAe,QACf/M,UAAWN,EAAQ2E,SAErB,kBAAC+G,GAAA,EAAD,CAAYpL,UAAWN,EAAQ2E,OAAS6G,OAAQnN,EAAYuP,UAAU7H,SAAtE,WACA,kBAAC8H,GAAA,EAAD,CACErC,MAAM,OACN7J,aAAW,UACXmM,YAAY,UACZC,QAAQ,IACRzN,UAAWN,EAAQwN,SACnBzN,SAAU6M,EAAkB,WAC5BnG,MAAOpI,EAAYuP,UAAU7H,WAUjC,kBAACsG,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ7K,QAAS4G,EAAavH,MAAM,WAApC,SAGA,kBAACwL,GAAA,EAAD,CAAQ7K,QAlGM,WAIpBW,EAAS,CAACM,KAAM,UAAW6J,QAASlO,KA8FEyC,MAAM,UAAUY,WAAU,UAACnD,EAAUqK,YAAX,aAAC,EAAgBC,aAAcxK,EAAYuP,UAAU7O,QAAUV,EAAYuP,UAAU7H,SAA/I,a,qDCvIJ5G,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ6K,QAAS,OACTC,SAAU,QAEZzF,OAAQ,CACNA,OAAQtF,EAAMK,QAAQ,IAExB2K,aAAc,CACZlH,UAAW9D,EAAMK,QAAQ,IAE3B4K,UAAW,CACTf,MAAO,QAETiD,OAAQ,CACNjD,MAAO,QACPtI,WAAY5B,EAAMK,QAAQ,IAE5B8N,SAAU,CACRC,KAAM,UACNlE,MAAO,OACPtI,WAAY5B,EAAMK,QAAQ,GAC1BgO,UAAW,cAEbM,OAAQ,CACNrJ,OAAQ,QAEVsJ,cAAe,CACbC,cAAe,MACf,QAAS,CACPvJ,OAAQtF,EAAMK,QAAQ,KAG1B+M,YAAa,CACXC,SAAU,aAIRxH,GAAc,CAClBiJ,YAAa,SACbC,eAAgB,aAChBC,aAAc,WACdC,QAAS,MAGI,SAASC,GAAkB1O,GACxC,IAAMG,EAAUb,KACTqE,EAAkB3D,EAAlB2D,KAAMzD,EAAYF,EAAZE,SAFkC,EAGT7B,IAAMC,WAAWC,KAHR,mBAGxCC,EAHwC,aAIXH,IAAMC,WAAWiH,MAJN,mBAIxCC,EAJwC,KAI5BmJ,EAJ4B,OAKjBtQ,IAAMC,WAAWG,KALA,mBAMzCe,GANyC,UAMjC8B,eACRwC,EAAI,gBAAQN,KAAQhF,EAAYoH,YAAYC,WAAarC,KAAQhF,EAAYoH,YAAYC,WAAarC,KAAO,QAAzG,GAA0HC,KAAiBjF,EAAYoH,YAAYC,YAEvK+I,EAAmB,SAACxK,GAAD,OAAS,SAACwC,GAGjC,IAAMiI,EAAS,aAAOrJ,EAAWS,OAAOE,MACxC,OAAO/B,GACL,KAAK,EACH,GAAGwC,GAASpB,EAAWS,OAAOE,KAAK,IAAMS,EAAMkI,QAAQtJ,EAAWS,OAAOE,KAAK,IAC5E,OAGCS,GAAOA,EAAMmI,IAAI,CAACC,OAAO,EAAEC,YAAY,IAC1CJ,EAAU,GAAKjI,EACf+H,EAAc,gBAAInJ,EAAL,CAAiBS,OAAO,gBAAKT,EAAWS,OAAjB,CAAyBE,KAAM0I,OACnE,MACF,KAAK,EACH,GAAGjI,GAASpB,EAAWS,OAAOE,KAAK,IAAMS,EAAMsI,SAAS1J,EAAWS,OAAOE,KAAK,IAC7E,OAICS,GAAOA,EAAMmI,IAAI,CAACC,OAAO,GAAGC,YAAY,MAC3CJ,EAAU,GAAKjI,EACf+H,EAAc,gBAAInJ,EAAL,CAAiBS,OAAO,gBAAKT,EAAWS,OAAjB,CAAyBE,KAAM0I,UAKnEM,EAAmB,SAAC/K,GAAD,OAAS,SAACrD,EAAO6F,GAGxC,IAAMwI,EAAU,aAAO5J,EAAWS,OAAOI,MACzC,OAAOjC,GACL,KAAK,EACHgL,EAAW,GAAKrO,EAAMC,OAAO4F,MAC7B+H,EAAc,gBAAInJ,EAAL,CAAiBS,OAAO,gBAAKT,EAAWS,OAAjB,CAAyBI,KAAM+I,OACnE,MACF,KAAK,EACHA,EAAW,GAAKrO,EAAMC,OAAO4F,MAC7B+H,EAAc,gBAAInJ,EAAL,CAAiBS,OAAO,gBAAKT,EAAWS,OAAjB,CAAyBI,KAAM+I,UAInE5G,EAAc,WAClBtI,GAAS,IAGX,OACI,kBAACiM,GAAA,EAAD,CAAQV,WAAS,EAAC9H,KAAMA,EAAMyF,QAASZ,EAAa4D,kBAAgB,yBAClE,kBAACC,GAAA,EAAD,CAAaX,GAAG,yBAAhB,YACA,kBAACY,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,wDAGA,kBAACX,GAAA,EAAD,CAAaH,WAAS,EAAChL,UAAWN,EAAQ2E,QAC1C,kBAACuK,GAAA,EAAD,CACEC,QAAS9P,EAAM+P,eACfC,eAAgB,SAACpL,GAAD,gBAAYA,EAAIqL,UAAU,EAAG,GAA7B,YAAmCrL,EAAIqL,UAAU,EAAG,KACpElL,MAAO,CAAEmF,MAAO,KAChB9C,MAAOpB,EAAWkK,OAClBC,kBAAgB,EAChBzP,SAAU,SAACa,EAAO6O,GAChBjB,EAAc,gBAAInJ,EAAL,CAAiBkK,OAAQE,MAExCC,YAAa,SAACC,GAAD,OACX,kBAACtE,GAAA,EAAD,iBACMsE,EADN,CAEEjR,MAAOW,EAAM0H,KAAK,oBAAoB,cAAe7B,IACrD7E,QAAQ,WACRiL,WAAS,SAKf,kBAAClL,EAAA,EAAD,eACA,kBAACwP,GAAA,EAAD,CAAWtP,UAAS,UAAKN,EAAQiO,gBAC/B,kBAAC4B,GAAA,EAAD,CACEnR,MAAM,aACN+H,MAAOpB,EAAWS,OAAOE,KAAK,GAC9BjG,SAAU0O,EAAiB,GAC3BjD,OAAO,EACPsE,WAAS,IAEX,kBAACD,GAAA,EAAD,CACEnR,MAAM,WACN+H,MAAOpB,EAAWS,OAAOE,KAAK,GAC9BjG,SAAU0O,EAAiB,GAC3BjD,OAAO,EACPsE,WAAS,KAGb,kBAACF,GAAA,EAAD,CAAWtP,UAAS,UAAKN,EAAQiO,gBAC/B,kBAACxC,GAAA,EAAD,CAAanL,UAAWN,EAAQyM,aAC9B,kBAACf,GAAA,EAAD,CAAYH,GAAG,2BAAf,cACA,kBAAC+B,GAAA,EAAD,CACEyC,QAAQ,0BACRxE,GAAG,oBACH9E,MAAOpB,EAAWS,OAAOI,KAAK,GAC9BnG,SAAUiP,EAAiB,IAE1BtL,OAAOsB,QAAQrB,GAAMI,KAAI,mCAAEE,EAAF,KAAOD,EAAP,YACxB,kBAACgM,GAAA,EAAD,CAAU/L,IAAKA,EAAKwC,MAAOxC,GAAMD,QAMvC,kBAACqH,GAAA,EAAD,CACEC,WAAS,EACTC,GAAG,cACH7M,MAAM,cACNqB,SAAUiP,EAAiB,GAC3BvI,MAAOpB,EAAWS,OAAOI,KAAK,OAIpC,kBAACmG,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQ7K,QAAS4G,EAAavH,MAAM,WAApC,WC1LK,SAASmP,GAAcpQ,GAAQ,IAEtC2D,EAEA3D,EAFA2D,KACA0M,EACArQ,EADAqQ,YAEJ,OACI,oCACI,kBAAC3F,GAAD,CACI/G,KAAMA,EAAK2M,kBACXpQ,SAAUmQ,EAAYpI,UAE1B,kBAAC6E,GAAD,CACInJ,KAAMA,EAAK4M,oBACXrQ,SAAUmQ,EAAYlI,YAE1B,kBAAC2F,GAAD,CACInK,KAAMA,EAAK6M,kBACXtQ,SAAUmQ,EAAYhI,UAE1B,kBAACqG,GAAD,CACI/K,KAAMA,EAAK8M,mBACXvQ,SAAUmQ,EAAY/H,YCmBvBoI,UAtCf,WAAgB,IAAD,EAC6BrS,IAAMiE,UAAS,GAD5C,mBACNqO,EADM,KACSC,EADT,OAEqCvS,IAAMiE,UAAS,GAFpD,mBAENgO,EAFM,KAEaO,EAFb,OAGyCxS,IAAMiE,UAAS,GAHxD,mBAGNiO,EAHM,KAGeO,EAHf,OAIqCzS,IAAMiE,UAAS,GAJpD,mBAINkO,EAJM,KAIaO,EAJb,OAKuC1S,IAAMiE,UAAS,GALtD,mBAKNmO,EALM,KAOPJ,EAAc,CAClBpI,QAAS4I,EACT1I,UAAW2I,EACXzI,QAAS0I,EACTzI,SAXW,MAkBb,OACE,oCACE,kBAACvI,EAAD,CACEE,OAAQ0Q,EACRzQ,SAAU0Q,IAEZ,kBAACtL,GAAD,MACA,kBAAC,GAAD,CACErF,OAAQ0Q,EACR/O,QAbgB,SAACiH,GACrBwH,EAAYxH,IAAM,MAchB,kBAACkB,GAAD,MACA,kBAACqG,GAAD,CACEzM,KAAM,CAAC2M,oBAAmBC,sBAAqBC,oBAAmBC,sBAClEJ,YAAaA","file":"static/js/4.eb854bec.chunk.js","sourcesContent":["import React from 'react'\r\nimport Box from '@material-ui/core/Box';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nexport default function MqttStatus() {\r\n    const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n    const [mqttState, dispatch] = React.useContext(MqttContext);\r\n    // const [mqttInstance, setMqttInstance] = mqttState.mqtt;\r\n    // const [status, setStatus] = mqttState.status;\r\n    return (\r\n        <Box>\r\n            <Chip label={`${mqttState.status.toUpperCase()}${mqttState.status === 'connected' ? ` to ${mqttSetting.url}` : ''}`} />\r\n            {/* <Chip label={`${mqttState.messagesCount} message(s)`} /> */}\r\n            {\r\n                mqttState.subscribedTo.topic ? \r\n                    <Chip avatar={<Avatar>{mqttState.subscribedTo.qos}</Avatar>} label={mqttState.subscribedTo.topic} /> :\r\n                    null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport MqttStatus from 'components/MqttStatus';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function NavBar(props) {\r\n    const {\r\n        hidden,\r\n        onChange\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    \r\n    const handleHiddenChange = (event) => {\r\n        onChange(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                    <MenuIcon />\r\n                </IconButton> */}\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {process.env.REACT_APP_WEBSITE_NAME}\r\n                </Typography>\r\n                <MqttStatus></MqttStatus>\r\n                <FormControlLabel\r\n                    control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"primary\" />}\r\n                    label=\"Hide Button\"\r\n                />\r\n                {/* <Button color=\"inherit\">Login</Button> */}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\n// const rows = [\r\n//   createData('Cupcake', 305, 3.7),\r\n//   createData('Donut', 452, 25.0),\r\n//   createData('Eclair', 262, 16.0),\r\n//   createData('Frozen yoghurt', 159, 6.0),\r\n//   createData('Gingerbread', 356, 16.0),\r\n//   createData('Honeycomb', 408, 3.2),\r\n//   createData('Ice cream sandwich', 237, 9.0),\r\n//   createData('Jelly Bean', 375, 0.0),\r\n//   createData('KitKat', 518, 26.0),\r\n//   createData('Lollipop', 392, 0.2),\r\n//   createData('Marshmallow', 318, 0),\r\n//   createData('Nougat', 360, 19.0),\r\n//   createData('Oreo', 437, 18.0),\r\n// ].sort((a, b) => (a.calories < b.calories ? -1 : 1));\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  control: {\r\n    fontWeight: 400\r\n  },\r\n}));\r\n\r\nexport default function ActionsRow(props) {\r\n  const classes = useStyles2();\r\n  const [pause, setPause] = React.useState(false);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  // const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const { count, page, rowsPerPage, onChangePage, onChangeRowsPerPage, rowsPerPageOptions, colSpan, SelectProps } = props;\r\n  // const handleChangePage = (event, newPage) => {\r\n  //   setPage(newPage);\r\n  // };\r\n\r\n  // const handleChangeRowsPerPage = (event) => {\r\n  //   setRowsPerPage(parseInt(event.target.value, 10));\r\n  //   setPage(0);\r\n  // };\r\n  const togglePause = () => {\r\n    // setPause(!pause);\r\n    dispatch({type: 'togglePause'});\r\n  }\r\n\r\n  return (\r\n          <TableRow>\r\n            <TableCell>\r\n              { mqttState.pause ? \r\n                <PlayCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/> :\r\n                <PauseCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/>\r\n              }\r\n            </TableCell>\r\n            <TablePagination\r\n              rowsPerPageOptions={rowsPerPageOptions}\r\n              colSpan={colSpan-1}\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={SelectProps}\r\n              onChangePage={onChangePage}\r\n              onChangeRowsPerPage={onChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n    }\r\n  }));\r\n  \r\n  \r\nexport default function MessageRow(props) {\r\n    const { columns, collpasedColumns, row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n    // console.log(row)\r\n    const colSpan = Object.keys(columns).length + 1;\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.root}>\r\n          <TableCell>\r\n          { collpasedColumns ?\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          : null}\r\n          </TableCell>\r\n          {Object.keys(columns).map((column) => (\r\n              <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n        { collpasedColumns ? \r\n            <TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={colSpan}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <Box margin={1}>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Metadata\r\n                    </Typography>\r\n                    <Table size=\"small\" aria-label=\"purchases\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {Object.entries(collpasedColumns).map(([key, column]) => (\r\n                            <TableCell key={key}>{column}</TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            {Object.keys(collpasedColumns).map((column) => (\r\n                                <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                    </Table>\r\n                </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n            </TableRow>\r\n        : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  // MessageRow.propTypes = {\r\n  //   row: PropTypes.shape({\r\n  //     calories: PropTypes.number.isRequired,\r\n  //     carbs: PropTypes.number.isRequired,\r\n  //     fat: PropTypes.number.isRequired,\r\n  //     history: PropTypes.arrayOf(\r\n  //       PropTypes.shape({\r\n  //         amount: PropTypes.number.isRequired,\r\n  //         customerId: PropTypes.string.isRequired,\r\n  //         date: PropTypes.string.isRequired,\r\n  //       }),\r\n  //     ).isRequired,\r\n  //     name: PropTypes.string.isRequired,\r\n  //     price: PropTypes.number.isRequired,\r\n  //     protein: PropTypes.number.isRequired,\r\n  //   }).isRequired,\r\n  // };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { AppSettingContext, MqttContext, MqttSettingContext } from 'hooks/context/Contexts';\r\nimport ActionsRow from 'components/tables/ActionsRow';\r\nimport MessageRow from 'components/tables/MessageRow';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n  container: {\r\n      marginTop: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  rowsPerPage: 'rows per page'\r\n}\r\n\r\nexport default function MessageTable() {\r\n  const classes = useRowStyles();\r\n  const theme = useTheme();\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [appSetting, setAppSetting] = React.useContext(AppSettingContext);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const tableColumns = columns[mqttSetting.subscribeTo.converter] ? \r\n    columns[mqttSetting.subscribeTo.converter] : \r\n    columns['default'];\r\n  const colSpan = Object.keys(tableColumns).length+1;\r\n  const pageOptions = [10, 25, 50, 100];\r\n  const filtered = mqttState.messages.filter((message) => {\r\n    if(appSetting.filter.time[0]){\r\n      let time = new Date(appSetting.filter.time[0]);\r\n      // time.setSeconds(0,0);\r\n      if(message.time < time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.time[1]){\r\n      let time = new Date(appSetting.filter.time[1]);\r\n      // time.setSeconds(0,0);\r\n      if(message.time > time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.text[0] && appSetting.filter.text[1]){\r\n      let regex =  new RegExp(appSetting.filter.text[1], 'i');\r\n      if(!regex.test(message[appSetting.filter.text[0]])) return false;\r\n    }\r\n    return true;\r\n  })\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"xl\" className={classes.container}>\r\n        <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"collapsible table\">\r\n        <TableHead>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableHead>\r\n          <TableHead>\r\n            <TableRow>\r\n                <TableCell />\r\n                {Object.entries(tableColumns).map(([key, column]) => (\r\n                    <TableCell key={key}>{column}</TableCell>\r\n                ))}\r\n                {/* <TableCell align=\"right\">Calories</TableCell>\r\n                <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n                <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n                <TableCell align=\"right\">Protein&nbsp;(g)</TableCell> */}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n          {filtered.reverse().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((message, index) => (\r\n              <MessageRow \r\n                key={index} \r\n                row={message}\r\n                columns={tableColumns}\r\n                collpasedColumns={collpasedColumns[mqttSetting.subscribeTo.converter]}\r\n              />\r\n          ))}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableFooter>\r\n        </Table>\r\n        </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\r\nimport RemoveFromQueueIcon from '@material-ui/icons/RemoveFromQueue';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nimport 'components/ConfigActions.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    transform: 'translateZ(0px)',\r\n    flexGrow: 1,\r\n  },\r\n  configActionsWrapper: {\r\n    position: 'relative',\r\n    marginTop: theme.spacing(3),\r\n    height: 380,\r\n  },\r\n  radioGroup: {\r\n    margin: theme.spacing(1, 0),\r\n  },\r\n  speedDial: {\r\n    position: 'fixed',\r\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n      top: theme.spacing(2),\r\n      left: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  connect: 'Connect',\r\n  disconnect: 'Disconnect',\r\n  subscribe: 'Subscribe',\r\n  unsubscribe: 'Unsubscribe',\r\n  publish: 'Publish',\r\n  settings: 'Settings'\r\n}\r\n\r\nexport default function ConfigActions(props) {\r\n  const {\r\n      hidden,\r\n      onClick\r\n  } = props;\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n//   const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const theme = useTheme();\r\n  // console.log(theme)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleOpenDialog = (dialog) => () => {\r\n    handleClose();\r\n    onClick(dialog);\r\n  }\r\n\r\n  const handleDisconnect = () =>{\r\n    if(mqttState.status === 'connected') dispatch({type: 'disconnect', dispatch});\r\n  }\r\n\r\n  const handleUnsubscribe = () =>{\r\n    if(mqttState.subscribedTo.topic) dispatch({type: 'unsubscribe', dispatch});\r\n  }\r\n\r\n  const actions = [\r\n    { \r\n        icon: <InputIcon />, \r\n        name: theme.i18n('MqttCommon','connect', defaultText),\r\n        handler: handleOpenDialog('connect'), \r\n        open: true\r\n    },\r\n    { \r\n        icon: <CancelPresentationIcon />, \r\n        name: theme.i18n('MqttCommon','disconnect', defaultText), \r\n        handler: handleDisconnect, \r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <AddToQueueIcon />, \r\n        name: theme.i18n('MqttCommon','subscribe', defaultText), \r\n        handler: handleOpenDialog('subscribe'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <RemoveFromQueueIcon />, \r\n        name: theme.i18n('MqttCommon','unsubscribe', defaultText),\r\n        handler: handleUnsubscribe,\r\n        open: mqttState.subscribedTo.topic && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <PublishIcon />, \r\n        name: theme.i18n('MqttCommon','publish', defaultText),\r\n        handler: handleOpenDialog('publish'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected \r\n    },\r\n    { \r\n        icon: <SettingsIcon />, \r\n        name: theme.i18n('MuiConfigActions','settings', defaultText),\r\n        handler: handleOpenDialog('settings'),\r\n        open: true\r\n    },\r\n  ];\r\n\r\n  return (\r\n        <SpeedDial\r\n          ariaLabel=\"SpeedDial example\"\r\n          className={`${classes.speedDial} ConfigActions ${hidden ? 'ConfigActions-hide' : ''}`}\r\n          hidden={hidden}\r\n          icon={<SpeedDialIcon />}\r\n          // icon={<SpeedDialIcon openIcon={<SettingsIcon />}/>}\r\n          onClose={handleClose}\r\n          onOpen={handleOpen}\r\n          open={open}\r\n          direction=\"up\"\r\n        >\r\n          {actions.map((action) => {\r\n            if(action.open) return(\r\n              <SpeedDialAction\r\n                key={action.name}\r\n                icon={action.icon}\r\n                tooltipTitle={action.name}\r\n                onClick={action.handler}\r\n                tooltipOpen={action.open}\r\n              />\r\n            )\r\n          })}\r\n        </SpeedDial>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    top: theme.spacing(10),\r\n    zIndex: 99999,\r\n    // left: theme.spacing(2),\r\n    // marginRight: theme.spacing(4),\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  alert: {\r\n    boxShadow: theme.shadows[8]\r\n  }\r\n}));\r\n\r\nexport default function AlertMessage() {\r\n  const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(false);\r\n  const [alert, setAlert] = React.useContext(AlertContext);\r\n  // console.log(alert)\r\n  const handleClose = () => {\r\n    setAlert([])\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {alert.length > 1 ? \r\n        <Alert severity={alert[0]} onClose={handleClose} className={classes.alert}>\r\n          {typeof alert[1] === 'object' && alert[1] !== null && alert[1].message ? alert[1].message : JSON.stringify(alert[1])}\r\n        </Alert>\r\n      : null}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n}));\r\n\r\n\r\nexport default function MqttConnectDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const connectDisabled = mqttState.mqtt?.connected || !mqttSetting.url || !mqttSetting.clientId || \r\n    (!mqttSetting.anomynous && (!mqttSetting.username || !mqttSetting.password));\r\n\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // setOpen(false);\r\n    onChange(false);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    dispatch({type: 'connect', setting: mqttSetting});\r\n  }\r\n\r\n  const handlDisconnect = () =>{\r\n    dispatch({type: 'disconnect'});\r\n  }\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    console.log(event.target.checked)\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      [prop]: event.target.type === 'checkbox' ? event.target.checked : event.target.value \r\n    });\r\n  };\r\n\r\n  const credentialInputs = (\r\n    <>\r\n      <TextField \r\n        fullWidth \r\n        className={classes.margin} \r\n        id=\"mqtt-username\" \r\n        label=\"Username\"\r\n        value={mqttSetting.username}\r\n        onChange={handleChange('username')}\r\n        error={!mqttSetting.username}\r\n      />\r\n      <FormControl fullWidth className={classes.margin}>\r\n        <InputLabel htmlFor=\"standard-adornment-password\" error={!mqttSetting.password}>Password</InputLabel>\r\n        <Input\r\n          id=\"standard-adornment-password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          value={mqttSetting.password}\r\n          onChange={handleChange('password')}\r\n          error={!mqttSetting.password}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n              >\r\n                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </FormControl>\r\n    </>\r\n  )\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"connect-dialog-title\">\r\n        <DialogTitle id=\"connect-dialog-title\">Connect to MQTT</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Connect to a MQTT server over WebSocket.\r\n          </DialogContentText>\r\n          <FormControl fullWidth className={classes.margin} error={!mqttSetting.url}>\r\n            <InputLabel htmlFor=\"standard-adornment-amount\">URL</InputLabel>\r\n            <Input\r\n              id=\"standard-adornment-url\"\r\n              value={mqttSetting.url}\r\n              onChange={handleChange('url')}\r\n              // startAdornment={<InputAdornment position=\"start\">ws://</InputAdornment>}\r\n            />\r\n          </FormControl>\r\n          <TextField \r\n            fullWidth \r\n            className={classes.margin} \r\n            id=\"mqtt-clientId\" \r\n            label=\"Client ID\"\r\n            value={mqttSetting.clientId}\r\n            onChange={handleChange('clientId')}\r\n            error={!mqttSetting.clientId}\r\n          />\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={mqttSetting.anomynous}\r\n                  onChange={handleChange('anomynous')}\r\n                  name=\"anomynous\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Anomynous\"\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          {mqttSetting.anomynous ? null : credentialInputs}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlDisconnect} color=\"primary\" disabled={mqttState.status !== 'connected' || !mqttState.mqtt?.connected}>\r\n            Disconnect\r\n          </Button>\r\n          <Button onClick={handleConnect} color=\"primary\" disabled={connectDisabled}>\r\n            Connect\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { MqttSettingContext, MqttContext, AlertContext} from 'hooks/context/Contexts';\r\nimport { types, messageConverter } from 'lib/converter/MessageConverter';\r\n\r\n// console.log(MqttSettingContext)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: '100%',\r\n  },\r\n}));\r\n\r\nexport default function MqttSubscribeDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n//   const [open, setOpen] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const [alert, setAlert, clearAlert] = React.useContext(AlertContext);\r\n  // console.log(mqttSetting)\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // setOpen(false);\r\n    onChange(false);\r\n  };\r\n\r\n  const handleSubscribe = () => {\r\n    if(!messageConverter[mqttSetting.subscribeTo.converter]){\r\n      setAlert(['error','Converter does not exist.']);\r\n      return;\r\n    }\r\n    dispatch({type: 'subscribe', setting: mqttSetting});\r\n  }\r\n\r\n  const handlUnsubscribe = () =>{\r\n    dispatch({type: 'unsubscribe'});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    // const index = prop == 'topic' ? 0 : prop = 'qos' ? 1 : -1;\r\n    // if(index < 0) return;\r\n    // let array = [...mqttSetting.topic];\r\n    // array.splice(index, 1, typeof value === 'undefined' ? event.target.value : value);\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      subscribeTo : {\r\n        ...mqttSetting.subscribeTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n    if(prop = 'converter' && !messageConverter[value]) setAlert(['error', 'Selected converter does not exist.'])\r\n  };\r\n\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: '0'\r\n    },\r\n    {\r\n      value: 1,\r\n      label: '1'\r\n    },\r\n    {\r\n      value: 2,\r\n      label: '2'\r\n    },\r\n  ]\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"subscribe-dialog-title\">\r\n        <DialogTitle id=\"subscribe-dialog-title\">Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Subscribe to a MQTT topic.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            id=\"topic\"\r\n            label=\"Topic\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.subscribeTo.topic}\r\n            error={!mqttSetting.subscribeTo.topic}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Slider\r\n                defaultValue={mqttSetting.subscribeTo.qos}\r\n                min={0}\r\n                max={2}\r\n                // getAriaValueText={valuetext}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={1}\r\n                marks={marks}\r\n                valueLabelDisplay=\"off\"\r\n                className={classes.slider} \r\n                onChange={handleTopicChange('qos')}\r\n              />\r\n            }\r\n            label=\"Qos\"\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          />\r\n          <FormControl className={classes.formControl} error={!messageConverter[mqttSetting.subscribeTo.converter]}>\r\n            <InputLabel htmlFor=\"age-native-simple\">Converter</InputLabel>\r\n            <Select\r\n              native\r\n              value={mqttSetting.subscribeTo.converter}\r\n              onChange={handleTopicChange('converter')}\r\n              inputProps={{\r\n                name: 'converter',\r\n                id: 'converter',\r\n              }}\r\n            >\r\n              {/* <option aria-label=\"None\" value=\"\" /> */}\r\n              {types.map((type) => (\r\n                <option key={type.value} value={type.value}>{type.label}</option>\r\n              ))}\r\n            </Select>\r\n        </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlUnsubscribe} color=\"primary\" disabled={!mqttState.subscribedTo.topic || !mqttState.mqtt.connected}>\r\n            Unsubscribe\r\n          </Button>\r\n          <Button onClick={handleSubscribe} color=\"primary\" disabled={!messageConverter[mqttSetting.subscribeTo.converter] || !mqttSetting.subscribeTo.topic}>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  textarea: {\r\n    font: 'inherit',\r\n    width: '100%',\r\n    marginLeft: theme.spacing(2),\r\n    boxSizing: 'border-box'\r\n  }\r\n}));\r\n\r\nexport default function MqttPublishDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n//   const [open, setOpen] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  // console.log(mqttSetting)\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // setOpen(false);\r\n    onChange(false);\r\n  };\r\n\r\n  const handlePublish = () => {\r\n    // if(!mqttSetting.publishTo.topic || !mqttSetting.publishTo.message){\r\n    //   return;\r\n    // }\r\n    dispatch({type: 'publish', setting: mqttSetting});\r\n  }\r\n\r\n  const handlUnsubscribe = () =>{\r\n    dispatch({type: 'unsubscribe'});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    // const index = prop == 'topic' ? 0 : prop = 'qos' ? 1 : -1;\r\n    // if(index < 0) return;\r\n    // let array = [...mqttSetting.topic];\r\n    // array.splice(index, 1, typeof value === 'undefined' ? event.target.value : value);\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      publishTo : {\r\n        ...mqttSetting.publishTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n  };\r\n\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: '0'\r\n    },\r\n    {\r\n      value: 1,\r\n      label: '1'\r\n    },\r\n    {\r\n      value: 2,\r\n      label: '2'\r\n    },\r\n  ]\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"publish-dialog-title\">\r\n        <DialogTitle id=\"publish-dialog-title\">Publish</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Publish to a MQTT topic.\r\n          </DialogContentText>\r\n          <TextField\r\n            error={!mqttSetting.publishTo.topic}\r\n            autoFocus\r\n            id=\"topic\"\r\n            label=\"Topic\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.publishTo.topic}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Slider\r\n                defaultValue={mqttSetting.publishTo.qos}\r\n                min={0}\r\n                max={2}\r\n                // getAriaValueText={valuetext}\r\n                aria-labelledby=\"discrete-slider-always\"\r\n                step={1}\r\n                marks={marks}\r\n                valueLabelDisplay=\"off\"\r\n                className={classes.slider} \r\n                onChange={handleTopicChange('qos')}\r\n              />\r\n            }\r\n            label=\"Qos\"\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          />\r\n          <InputLabel className={classes.margin}  error={!mqttSetting.publishTo.message}>Message</InputLabel>\r\n          <TextareaAutosize \r\n            error=\"true\"\r\n            aria-label=\"message\" \r\n            placeholder=\"Message\" \r\n            rowsMin=\"3\" \r\n            className={classes.textarea}  \r\n            onChange={handleTopicChange('message')}\r\n            value={mqttSetting.publishTo.message}\r\n          />\r\n          {/* <FormControlLabel\r\n            control={\r\n            }\r\n            label=\"Message\"\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          /> */}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlePublish} color=\"primary\" disabled={!mqttState.mqtt?.connected || !mqttSetting.publishTo.topic || !mqttSetting.publishTo.message}>\r\n            Publish\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { AppSettingContext, MqttSettingContext, MqttContext} from 'hooks/context/Contexts';\r\nimport { KeyboardDateTimePicker, DateTimePicker } from '@material-ui/pickers';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  textarea: {\r\n    font: 'inherit',\r\n    width: '100%',\r\n    marginLeft: theme.spacing(2),\r\n    boxSizing: 'border-box'\r\n  },\r\n  toText: {\r\n    margin: 'auto'\r\n  },\r\n  filterControl: {\r\n    flexDirection: 'row',\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    }\r\n  },\r\n  formControl: {\r\n    minWidth: '180px',\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  localeLabel: 'Locale',\r\n  startTimeLabel: 'Start Time',\r\n  endTimeLabel: 'End Time',\r\n  toLabel: 'To'\r\n}\r\n\r\nexport default function AppSettingsDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [appSetting, setAppSetting] = React.useContext(AppSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const theme = useTheme();\r\n  const keys = {...(columns[mqttSetting.subscribeTo.converter] ? columns[mqttSetting.subscribeTo.converter] : columns['default']), ...collpasedColumns[mqttSetting.subscribeTo.converter]};\r\n\r\n  const handleTimeChange = (key) => (value) => {\r\n    // console.log(key)\r\n    // console.log(value)\r\n    const timeRange = [...appSetting.filter.time];\r\n    switch(key){\r\n      case 0:\r\n        if(value && appSetting.filter.time[1] && value.isAfter(appSetting.filter.time[1])){\r\n          return;\r\n        }\r\n        // setStartTime(value);\r\n        if(value) value.set({second:0,millisecond:0})\r\n        timeRange[0] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n      case 1:\r\n        if(value && appSetting.filter.time[0] && value.isBefore(appSetting.filter.time[0])){\r\n          return;\r\n        }\r\n        // setEndTime(value);\r\n        // const timeRange = [...appSetting.filter.time];\r\n        if(value) value.set({second:59,millisecond:999})\r\n        timeRange[1] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleTextChange = (key) => (event, value) => {\r\n    // console.log(key)\r\n    // console.log(value)\r\n    const textFilter = [...appSetting.filter.text];\r\n    switch(key){\r\n      case 0:\r\n        textFilter[0] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n      case 1:\r\n        textFilter[1] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n    }\r\n  }\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"settings-dialog-title\">\r\n        <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Application settings for MQTT Websocket Client.\r\n          </DialogContentText>\r\n          <FormControl fullWidth className={classes.margin}>\r\n          <Autocomplete\r\n            options={theme.supportLocales}\r\n            getOptionLabel={(key) => `${key.substring(0, 2)}-${key.substring(2, 4)}`}\r\n            style={{ width: 300 }}\r\n            value={appSetting.locale}\r\n            disableClearable\r\n            onChange={(event, newValue) => {\r\n              setAppSetting({...appSetting, locale: newValue});\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField \r\n                {...params} \r\n                label={theme.i18n('AppSettingsDialog','localeLabel', defaultText)} \r\n                variant=\"outlined\" \r\n                fullWidth \r\n              />\r\n            )}\r\n          />\r\n          </FormControl>\r\n          <Typography>Filter</Typography>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <DateTimePicker \r\n              label=\"Start Time\"\r\n              value={appSetting.filter.time[0]} \r\n              onChange={handleTimeChange(0)} \r\n              error={false}\r\n              clearable\r\n            />\r\n            <DateTimePicker \r\n              label=\"End Time\"\r\n              value={appSetting.filter.time[1]} \r\n              onChange={handleTimeChange(1)} \r\n              error={false}\r\n              clearable\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"filter-key-select-label\">Filter Key</InputLabel>\r\n              <Select\r\n                labelId=\"filter-key-select-label\"\r\n                id=\"filter-key-select\"\r\n                value={appSetting.filter.text[0]}\r\n                onChange={handleTextChange(0)}\r\n              >\r\n                {Object.entries(keys).map(([key, column]) => (\r\n                  <MenuItem key={key} value={key}>{column}</MenuItem>\r\n                ))}\r\n                {/* <MenuItem value={20}>Twenty</MenuItem>\r\n                <MenuItem value={30}>Thirty</MenuItem> */}\r\n              </Select>\r\n            </FormControl>\r\n            <TextField \r\n              fullWidth \r\n              id=\"filter-text\" \r\n              label=\"Filter Text\" \r\n              onChange={handleTextChange(1)}\r\n              value={appSetting.filter.text[1]}\r\n            />\r\n          </FormGroup>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          {/* <Button onClick={handlePublish} color=\"primary\" disabled={!mqttState.mqtt?.connected || !mqttSetting.publishTo.topic || !mqttSetting.publishTo.message}>\r\n            Publish\r\n          </Button> */}\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport MqttConnectDialog from 'components/dialogs/MqttConnectDialog';\r\nimport MqttSubscribeDialog from 'components/dialogs/MqttSubscribeDialog';\r\nimport MqttPublishDialog from 'components/dialogs/MqttPublishDialog';\r\nimport AppSettingsDialog from 'components/dialogs/AppSettingsDialog';\r\n\r\nexport default function DialogWrapper(props) {\r\n    const {\r\n        open,\r\n        openDialogs\r\n    } = props;\r\n    return (\r\n        <>\r\n            <MqttConnectDialog \r\n                open={open.openConnectDialog}\r\n                onChange={openDialogs.connect}\r\n            />\r\n            <MqttSubscribeDialog \r\n                open={open.openSubscribeDialog}\r\n                onChange={openDialogs.subscribe}\r\n            />\r\n            <MqttPublishDialog \r\n                open={open.openPublishDialog}\r\n                onChange={openDialogs.publish}\r\n            />\r\n            <AppSettingsDialog \r\n                open={open.openSettingsDialog}\r\n                onChange={openDialogs.settings}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from 'components/NavBar';\r\nimport MessageTable from 'components/tables/MessageTable';\r\nimport ConfigActions from 'components/ConfigActions';\r\nimport AlertMessage from 'components/AlertMessage';\r\nimport DialogWrapper from 'components/dialogs/DialogWrapper';\r\n\r\nfunction App() {\r\n  const [hideActionBtn, setHideActionBtn] = React.useState(false);\r\n  const [openConnectDialog, setOpenConnectDialog] = React.useState(false);\r\n  const [openSubscribeDialog, setOpenSubscribeDialog] = React.useState(false);\r\n  const [openPublishDialog, setOpenPublishDialog] = React.useState(false);\r\n  const [openSettingsDialog, setOpenSettingsDialog] = React.useState(false);\r\n\r\n  const openDialogs = {\r\n    connect: setOpenConnectDialog,\r\n    subscribe: setOpenSubscribeDialog,\r\n    publish: setOpenPublishDialog,\r\n    settings: setOpenSettingsDialog\r\n  }\r\n\r\n  const setOpenDialog = (name) => {\r\n    openDialogs[name](true);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <NavBar\r\n        hidden={hideActionBtn}\r\n        onChange={setHideActionBtn}\r\n      />\r\n      <MessageTable></MessageTable>\r\n      <ConfigActions\r\n        hidden={hideActionBtn}\r\n        onClick={setOpenDialog}\r\n      />\r\n      <AlertMessage></AlertMessage>\r\n      <DialogWrapper \r\n        open={{openConnectDialog, openSubscribeDialog, openPublishDialog, openSettingsDialog}}\r\n        openDialogs={openDialogs}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}