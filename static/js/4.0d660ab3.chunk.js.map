{"version":3,"sources":["components/MqttStatus.js","components/NavBar.js","components/tables/ActionsRow.js","components/tables/MessageRow.js","components/tables/MessageTable.js","components/ConfigActions.js","components/AlertMessage.js","components/dialogs/MqttConnectDialog.js","components/dialogs/MqttSubscribeDialog.js","components/dialogs/MqttPublishDialog.js","components/dialogs/AppSettingsDialog.js","components/dialogs/DialogWrapper.js","App.js"],"names":["MqttStatus","React","useContext","MqttSettingContext","mqttSetting","MqttContext","mqttState","Box","Chip","label","status","toUpperCase","url","subscribedTo","topic","avatar","Avatar","qos","useStyles","makeStyles","theme","title","flexGrow","NavBar","props","hidden","onChange","classes","AppBar","position","Toolbar","Typography","variant","className","process","FormControlLabel","control","Switch","checked","event","target","color","useStyles1","root","flexShrink","marginLeft","spacing","TablePaginationActions","useTheme","count","page","rowsPerPage","onChangePage","IconButton","onClick","disabled","aria-label","direction","Math","ceil","max","useStyles2","fontWeight","ActionsRow","dispatch","onChangeRowsPerPage","rowsPerPageOptions","colSpan","SelectProps","togglePause","type","TableRow","TableCell","pause","TablePagination","ActionsComponent","useRowStyles","row","borderBottom","MessageRow","columns","collpasedColumns","useState","open","setOpen","Object","keys","length","Fragment","size","map","column","key","Date","toLocaleString","style","paddingBottom","paddingTop","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","component","Table","TableHead","entries","TableBody","container","marginTop","defaultText","MessageTable","AppSettingContext","appSetting","setPage","setRowsPerPage","tableColumns","subscribeTo","converter","pageOptions","filtered","messages","filter","message","time","getTime","text","RegExp","test","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","Container","maxWidth","TableContainer","Paper","inputProps","i18n","native","reverse","slice","index","TableFooter","speedDial","bottom","right","top","left","connect","disconnect","subscribe","unsubscribe","publish","settings","ConfigActions","handleClose","handleOpenDialog","dialog","actions","icon","name","handler","mqtt","connected","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","action","SpeedDialAction","tooltipTitle","tooltipOpen","width","zIndex","alert","boxShadow","shadows","AlertMessage","AlertContext","setAlert","Alert","severity","JSON","stringify","MqttConnectDialog","showPassword","setShowPassword","setMqttSetting","connectDisabled","clientId","anomynous","username","password","handleChange","prop","console","log","credentialInputs","TextField","fullWidth","id","error","FormControl","InputLabel","htmlFor","endAdornment","InputAdornment","onMouseDown","preventDefault","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","setting","slider","formControl","minWidth","marks","MqttSubscribeDialog","handleTopicChange","messageConverter","autoFocus","Slider","defaultValue","min","step","valueLabelDisplay","labelPlacement","Select","types","textarea","font","boxSizing","MqttPublishDialog","publishTo","TextareaAutosize","placeholder","rowsMin","filterControl","flexDirection","localeLabel","startTimeLabel","endTimeLabel","toLabel","langauges","enUS","zhTW","AppSettingsDialog","setAppSetting","handleTimeChange","timeRange","isAfter","set","second","millisecond","isBefore","handleTextChange","textFilter","Autocomplete","options","supportLocales","getOptionLabel","substring","locale","disableClearable","newValue","renderInput","params","FormGroup","DateTimePicker","clearable","labelId","MenuItem","DialogWrapper","openDialogs","openConnectDialog","openSubscribeDialog","openPublishDialog","openSettingsDialog","App","hideActionBtn","setHideActionBtn","setOpenConnectDialog","setOpenSubscribeDialog","setOpenPublishDialog"],"mappings":"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","file":"static/js/4.0d660ab3.chunk.js","sourcesContent":["import React from 'react'\r\nimport Box from '@material-ui/core/Box';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nexport default function MqttStatus() {\r\n    const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n    const [mqttState, ] = React.useContext(MqttContext);\r\n    return (\r\n        <Box>\r\n            <Chip label={`${mqttState.status.toUpperCase()}${mqttState.status === 'connected' ? ` to ${mqttSetting.url}` : ''}`} />\r\n            {\r\n                mqttState.subscribedTo.topic ? \r\n                    <Chip avatar={<Avatar>{mqttState.subscribedTo.qos}</Avatar>} label={mqttState.subscribedTo.topic} /> :\r\n                    null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport MqttStatus from 'components/MqttStatus';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function NavBar(props) {\r\n    const {\r\n        hidden,\r\n        onChange\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    \r\n    const handleHiddenChange = (event) => {\r\n        onChange(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {process.env.REACT_APP_WEBSITE_NAME}\r\n                </Typography>\r\n                <MqttStatus></MqttStatus>\r\n                <FormControlLabel\r\n                    control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"secondary\" />}\r\n                    label=\"Hide Button\"\r\n                />\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  control: {\r\n    fontWeight: 400\r\n  },\r\n}));\r\n\r\nexport default function ActionsRow(props) {\r\n  const classes = useStyles2();\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const { count, page, rowsPerPage, onChangePage, onChangeRowsPerPage, rowsPerPageOptions, colSpan, SelectProps } = props;\r\n\r\n  const togglePause = () => {\r\n    dispatch({type: 'togglePause'});\r\n  }\r\n\r\n  return (\r\n          <TableRow>\r\n            <TableCell>\r\n              { mqttState.pause ? \r\n                <PlayCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/> :\r\n                <PauseCircleOutlineIcon onClick={togglePause} className={`MuiSvgIcon-root ${classes.control}`}/>\r\n              }\r\n            </TableCell>\r\n            <TablePagination\r\n              rowsPerPageOptions={rowsPerPageOptions}\r\n              colSpan={colSpan-1}\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={SelectProps}\r\n              onChangePage={onChangePage}\r\n              onChangeRowsPerPage={onChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n    row: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n  }));\r\n  \r\n  \r\nexport default function MessageRow(props) {\r\n    const { columns, collpasedColumns, row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n    const colSpan = Object.keys(columns).length + 1;\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.row}>\r\n          <TableCell>\r\n          { collpasedColumns ?\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          : null}\r\n          </TableCell>\r\n          {Object.keys(columns).map((column) => (\r\n              <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n        { collpasedColumns ? \r\n            <TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={colSpan}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <Box margin={1}>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Metadata\r\n                    </Typography>\r\n                    <Table size=\"small\" aria-label=\"purchases\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {Object.entries(collpasedColumns).map(([key, column]) => (\r\n                            <TableCell key={key}>{column}</TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            {Object.keys(collpasedColumns).map((column) => (\r\n                                <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                    </Table>\r\n                </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n            </TableRow>\r\n        : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport { AppSettingContext, MqttContext, MqttSettingContext } from 'hooks/context/Contexts';\r\nimport ActionsRow from 'components/tables/ActionsRow';\r\nimport MessageRow from 'components/tables/MessageRow';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n  container: {\r\n      marginTop: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  rowsPerPage: 'rows per page'\r\n}\r\n\r\nexport default function MessageTable() {\r\n  const classes = useRowStyles();\r\n  const theme = useTheme();\r\n  const [mqttState, ] = React.useContext(MqttContext);\r\n  const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n  const [appSetting, ] = React.useContext(AppSettingContext);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const tableColumns = columns[mqttSetting.subscribeTo.converter] ? \r\n    columns[mqttSetting.subscribeTo.converter] : \r\n    columns['default'];\r\n  const colSpan = Object.keys(tableColumns).length+1;\r\n  const pageOptions = [10, 25, 50, 100];\r\n  const filtered = mqttState.messages.filter((message) => {\r\n    if(appSetting.filter.time[0]){\r\n      let time = new Date(appSetting.filter.time[0]);\r\n      if(message.time < time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.time[1]){\r\n      let time = new Date(appSetting.filter.time[1]);\r\n      if(message.time > time.getTime()) return false;\r\n    }\r\n    if(appSetting.filter.text[0] && appSetting.filter.text[1]){\r\n      let regex =  new RegExp(appSetting.filter.text[1], 'i');\r\n      if(!regex.test(message[appSetting.filter.text[0]])) return false;\r\n    }\r\n    return true;\r\n  })\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"xl\" className={classes.container}>\r\n      <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"collapsible table\">\r\n          <TableHead>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableHead>\r\n          <TableHead>\r\n            <TableRow>\r\n                <TableCell />\r\n                {Object.entries(tableColumns).map(([key, column]) => (\r\n                    <TableCell key={key}>{column}</TableCell>\r\n                ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n          {filtered.reverse().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n          .map((message, index) => (\r\n              <MessageRow \r\n                key={index} \r\n                row={message}\r\n                columns={tableColumns}\r\n                collpasedColumns={collpasedColumns[mqttSetting.subscribeTo.converter]}\r\n              />\r\n          ))}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <ActionsRow\r\n              rowsPerPageOptions={pageOptions}\r\n              colSpan={colSpan}\r\n              count={mqttState.messages.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': theme.i18n('MessageTable','rowsPerPage', defaultText) },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\r\nimport RemoveFromQueueIcon from '@material-ui/icons/RemoveFromQueue';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\n\r\nimport 'components/ConfigActions.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  speedDial: {\r\n    position: 'fixed',\r\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n      top: theme.spacing(2),\r\n      left: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst defaultText = {\r\n  connect: 'Connect',\r\n  disconnect: 'Disconnect',\r\n  subscribe: 'Subscribe',\r\n  unsubscribe: 'Unsubscribe',\r\n  publish: 'Publish',\r\n  settings: 'Settings'\r\n}\r\n\r\nexport default function ConfigActions(props) {\r\n  const {\r\n      hidden,\r\n      onClick\r\n  } = props;\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const theme = useTheme();\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleOpenDialog = (dialog) => () => {\r\n    handleClose();\r\n    onClick(dialog);\r\n  }\r\n\r\n  const handleDisconnect = () =>{\r\n    if(mqttState.status === 'connected') dispatch({type: 'disconnect', dispatch});\r\n  }\r\n\r\n  const handleUnsubscribe = () =>{\r\n    if(mqttState.subscribedTo.topic) dispatch({type: 'unsubscribe', dispatch});\r\n  }\r\n\r\n  const actions = [\r\n    { \r\n        icon: <InputIcon />, \r\n        name: theme.i18n('MqttCommon','connect', defaultText),\r\n        handler: handleOpenDialog('connect'), \r\n        open: true\r\n    },\r\n    { \r\n        icon: <CancelPresentationIcon />, \r\n        name: theme.i18n('MqttCommon','disconnect', defaultText), \r\n        handler: handleDisconnect, \r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <AddToQueueIcon />, \r\n        name: theme.i18n('MqttCommon','subscribe', defaultText), \r\n        handler: handleOpenDialog('subscribe'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <RemoveFromQueueIcon />, \r\n        name: theme.i18n('MqttCommon','unsubscribe', defaultText),\r\n        handler: handleUnsubscribe,\r\n        open: mqttState.subscribedTo.topic && mqttState.mqtt.connected\r\n    },\r\n    { \r\n        icon: <PublishIcon />, \r\n        name: theme.i18n('MqttCommon','publish', defaultText),\r\n        handler: handleOpenDialog('publish'),\r\n        open: mqttState.status === 'connected' && mqttState.mqtt.connected \r\n    },\r\n    { \r\n        icon: <SettingsIcon />, \r\n        name: theme.i18n('MuiConfigActions','settings', defaultText),\r\n        handler: handleOpenDialog('settings'),\r\n        open: true\r\n    },\r\n  ];\r\n\r\n  return (\r\n        <SpeedDial\r\n          ariaLabel=\"SpeedDial example\"\r\n          className={`${classes.speedDial} ConfigActions ${hidden ? 'ConfigActions-hide' : ''}`}\r\n          hidden={hidden}\r\n          icon={<SpeedDialIcon />}\r\n          onClose={handleClose}\r\n          onOpen={handleOpen}\r\n          open={open}\r\n          direction=\"up\"\r\n        >\r\n          {actions.map((action) => \r\n            action.open ? (\r\n              <SpeedDialAction\r\n                key={action.name}\r\n                icon={action.icon}\r\n                tooltipTitle={action.name}\r\n                onClick={action.handler}\r\n                tooltipOpen={action.open}\r\n              />\r\n            ) : null\r\n          )}\r\n        </SpeedDial>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    top: theme.spacing(10),\r\n    zIndex: 99999,\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  alert: {\r\n    boxShadow: theme.shadows[8]\r\n  }\r\n}));\r\n\r\nexport default function AlertMessage() {\r\n  const classes = useStyles();\r\n  const [alert, setAlert] = React.useContext(AlertContext);\r\n  const handleClose = () => {\r\n    setAlert([])\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {alert.length > 1 ? \r\n        <Alert severity={alert[0]} onClose={handleClose} className={classes.alert}>\r\n          {typeof alert[1] === 'object' && alert[1] !== null && alert[1].message ? alert[1].message : JSON.stringify(alert[1])}\r\n        </Alert>\r\n      : null}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nexport default function MqttConnectDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const connectDisabled = mqttState.mqtt?.connected || !mqttSetting.url || !mqttSetting.clientId || \r\n    (!mqttSetting.anomynous && (!mqttSetting.username || !mqttSetting.password));\r\n\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    dispatch({type: 'connect', setting: mqttSetting});\r\n  }\r\n\r\n  const handlDisconnect = () =>{\r\n    dispatch({type: 'disconnect'});\r\n  }\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    console.log(event.target.checked)\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      [prop]: event.target.type === 'checkbox' ? event.target.checked : event.target.value \r\n    });\r\n  };\r\n\r\n  const credentialInputs = (\r\n    <>\r\n      <TextField \r\n        fullWidth \r\n        className={classes.margin} \r\n        id=\"mqtt-username\" \r\n        label=\"Username\"\r\n        value={mqttSetting.username}\r\n        onChange={handleChange('username')}\r\n        error={!mqttSetting.username}\r\n      />\r\n      <FormControl fullWidth className={classes.margin}>\r\n        <InputLabel htmlFor=\"standard-adornment-password\" error={!mqttSetting.password}>Password</InputLabel>\r\n        <Input\r\n          id=\"standard-adornment-password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          value={mqttSetting.password}\r\n          onChange={handleChange('password')}\r\n          error={!mqttSetting.password}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n              >\r\n                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </FormControl>\r\n    </>\r\n  )\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"connect-dialog-title\">\r\n        <DialogTitle id=\"connect-dialog-title\">Connect to MQTT</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Connect to a MQTT server over WebSocket.\r\n          </DialogContentText>\r\n          <FormControl fullWidth className={classes.margin} error={!mqttSetting.url}>\r\n            <InputLabel htmlFor=\"standard-adornment-amount\">URL</InputLabel>\r\n            <Input\r\n              id=\"standard-adornment-url\"\r\n              value={mqttSetting.url}\r\n              onChange={handleChange('url')}\r\n              // startAdornment={<InputAdornment position=\"start\">ws://</InputAdornment>}\r\n            />\r\n          </FormControl>\r\n          <TextField \r\n            fullWidth \r\n            className={classes.margin} \r\n            id=\"mqtt-clientId\" \r\n            label=\"Client ID\"\r\n            value={mqttSetting.clientId}\r\n            onChange={handleChange('clientId')}\r\n            error={!mqttSetting.clientId}\r\n          />\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={mqttSetting.anomynous}\r\n                  onChange={handleChange('anomynous')}\r\n                  name=\"anomynous\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Anomynous\"\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          {mqttSetting.anomynous ? null : credentialInputs}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlDisconnect} color=\"primary\" disabled={mqttState.status !== 'connected' || !mqttState.mqtt?.connected}>\r\n            Disconnect\r\n          </Button>\r\n          <Button onClick={handleConnect} color=\"primary\" disabled={connectDisabled}>\r\n            Connect\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { MqttSettingContext, MqttContext, AlertContext} from 'hooks/context/Contexts';\r\nimport { types, messageConverter } from 'lib/converter/MessageConverter';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: '100%',\r\n  },\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 0,\r\n    label: '0'\r\n  },\r\n  {\r\n    value: 1,\r\n    label: '1'\r\n  },\r\n  {\r\n    value: 2,\r\n    label: '2'\r\n  },\r\n]\r\n\r\nexport default function MqttSubscribeDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const [, setAlert, ] = React.useContext(AlertContext);\r\n\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  const handleSubscribe = () => {\r\n    if(!messageConverter[mqttSetting.subscribeTo.converter]){\r\n      setAlert(['error','Converter does not exist.']);\r\n      return;\r\n    }\r\n    dispatch({type: 'subscribe', setting: mqttSetting});\r\n  }\r\n\r\n  const handlUnsubscribe = () =>{\r\n    dispatch({type: 'unsubscribe'});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      subscribeTo : {\r\n        ...mqttSetting.subscribeTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n    if(prop === 'converter' && !messageConverter[value]) setAlert(['error', 'Selected converter does not exist.'])\r\n  };\r\n\r\n\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"subscribe-dialog-title\">\r\n        <DialogTitle id=\"subscribe-dialog-title\">Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Subscribe to a MQTT topic.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            id=\"topic\"\r\n            label=\"Topic\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.subscribeTo.topic}\r\n            error={!mqttSetting.subscribeTo.topic}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Slider\r\n                defaultValue={mqttSetting.subscribeTo.qos}\r\n                min={0}\r\n                max={2}\r\n                step={1}\r\n                marks={marks}\r\n                valueLabelDisplay=\"off\"\r\n                className={classes.slider} \r\n                onChange={handleTopicChange('qos')}\r\n              />\r\n            }\r\n            label=\"Qos\"\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          />\r\n          <FormControl className={classes.formControl} error={!messageConverter[mqttSetting.subscribeTo.converter]}>\r\n            <InputLabel htmlFor=\"age-native-simple\">Converter</InputLabel>\r\n            <Select\r\n              native\r\n              value={mqttSetting.subscribeTo.converter}\r\n              onChange={handleTopicChange('converter')}\r\n              inputProps={{\r\n                name: 'converter',\r\n                id: 'converter',\r\n              }}\r\n            >\r\n              {types.map((type) => (\r\n                <option key={type.value} value={type.value}>{type.label}</option>\r\n              ))}\r\n            </Select>\r\n        </FormControl>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlUnsubscribe} color=\"primary\" disabled={!mqttState.subscribedTo.topic || !mqttState.mqtt.connected}>\r\n            Unsubscribe\r\n          </Button>\r\n          <Button onClick={handleSubscribe} color=\"primary\" disabled={!messageConverter[mqttSetting.subscribeTo.converter] || !mqttSetting.subscribeTo.topic}>\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  textarea: {\r\n    font: 'inherit',\r\n    width: '100%',\r\n    marginLeft: theme.spacing(2),\r\n    boxSizing: 'border-box'\r\n  }\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 0,\r\n    label: '0'\r\n  },\r\n  {\r\n    value: 1,\r\n    label: '1'\r\n  },\r\n  {\r\n    value: 2,\r\n    label: '2'\r\n  },\r\n]\r\n\r\nexport default function MqttPublishDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  const handlePublish = () => {\r\n    dispatch({type: 'publish', setting: mqttSetting});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      publishTo : {\r\n        ...mqttSetting.publishTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n  };\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"publish-dialog-title\">\r\n        <DialogTitle id=\"publish-dialog-title\">Publish</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Publish to a MQTT topic.\r\n          </DialogContentText>\r\n          <TextField\r\n            error={!mqttSetting.publishTo.topic}\r\n            autoFocus\r\n            id=\"topic\"\r\n            label=\"Topic\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.publishTo.topic}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Slider\r\n                defaultValue={mqttSetting.publishTo.qos}\r\n                min={0}\r\n                max={2}\r\n                step={1}\r\n                marks={marks}\r\n                valueLabelDisplay=\"off\"\r\n                className={classes.slider} \r\n                onChange={handleTopicChange('qos')}\r\n              />\r\n            }\r\n            label=\"Qos\"\r\n            labelPlacement=\"start\"\r\n            className={classes.margin} \r\n          />\r\n          <InputLabel className={classes.margin}  error={!mqttSetting.publishTo.message}>Message</InputLabel>\r\n          <TextareaAutosize \r\n            error=\"true\"\r\n            aria-label=\"message\" \r\n            placeholder=\"Message\" \r\n            rowsMin=\"3\" \r\n            className={classes.textarea}  \r\n            onChange={handleTopicChange('message')}\r\n            value={mqttSetting.publishTo.message}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n          <Button onClick={handlePublish} color=\"primary\" disabled={!mqttState.mqtt?.connected || !mqttSetting.publishTo.topic || !mqttSetting.publishTo.message}>\r\n            Publish\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { AppSettingContext, MqttSettingContext } from 'hooks/context/Contexts';\r\nimport { DateTimePicker } from '@material-ui/pickers';\r\nimport { columns, collpasedColumns } from 'lib/converter/MessageConverter';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  filterControl: {\r\n    flexDirection: 'row',\r\n    '& > *': {\r\n      margin: theme.spacing(1)\r\n    }\r\n  },\r\n  formControl: {\r\n    minWidth: '180px',\r\n  }\r\n}));\r\n\r\nconst defaultText = {\r\n  localeLabel: 'Locale',\r\n  startTimeLabel: 'Start Time',\r\n  endTimeLabel: 'End Time',\r\n  toLabel: 'To',\r\n  langauges: {\r\n    enUS: 'English',\r\n    zhTW: '繁體中文'\r\n  }\r\n}\r\n\r\n\r\nexport default function AppSettingsDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [mqttSetting, ] = React.useContext(MqttSettingContext);\r\n  const [appSetting, setAppSetting] = React.useContext(AppSettingContext);\r\n  const theme = useTheme();\r\n  const keys = {...(columns[mqttSetting.subscribeTo.converter] ? columns[mqttSetting.subscribeTo.converter] : columns['default']), ...collpasedColumns[mqttSetting.subscribeTo.converter]};\r\n\r\n  const handleTimeChange = (key) => (value) => {\r\n    const timeRange = [...appSetting.filter.time];\r\n    switch(key){\r\n      case 0:\r\n        if(value && appSetting.filter.time[1] && value.isAfter(appSetting.filter.time[1])){\r\n          return;\r\n        }\r\n        if(value) value.set({second:0,millisecond:0})\r\n        timeRange[0] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n      case 1:\r\n        if(value && appSetting.filter.time[0] && value.isBefore(appSetting.filter.time[0])){\r\n          return;\r\n        }\r\n        if(value) value.set({second:59,millisecond:999})\r\n        timeRange[1] = value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, time: timeRange}});\r\n        break;\r\n      default:\r\n        console.log(key);\r\n    }\r\n  }\r\n\r\n  const handleTextChange = (key) => (event, value) => {\r\n    const textFilter = [...appSetting.filter.text];\r\n    switch(key){\r\n      case 0:\r\n        textFilter[0] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n      case 1:\r\n        textFilter[1] = event.target.value;\r\n        setAppSetting({...appSetting, filter: {...appSetting.filter, text: textFilter}});\r\n        break;\r\n      default:\r\n        console.log(key);\r\n    }\r\n  }\r\n  const handleClose = () => {\r\n    onChange(false);\r\n  };\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"settings-dialog-title\">\r\n        <DialogTitle id=\"settings-dialog-title\">Settings</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Application settings for MQTT Websocket Client.\r\n          </DialogContentText>\r\n          <FormControl fullWidth className={classes.margin}>\r\n          <Autocomplete\r\n            options={theme.supportLocales}\r\n            getOptionLabel={\r\n              (key) => defaultText.langauges[key] ? \r\n                defaultText.langauges[key] : \r\n                `${key.substring(0, 2)}-${key.substring(2, 4)}`\r\n            }\r\n            style={{ width: 300 }}\r\n            value={appSetting.locale}\r\n            disableClearable\r\n            onChange={(event, newValue) => {\r\n              setAppSetting({...appSetting, locale: newValue});\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField \r\n                {...params} \r\n                label={theme.i18n('AppSettingsDialog','localeLabel', defaultText)} \r\n                variant=\"outlined\" \r\n                fullWidth \r\n              />\r\n            )}\r\n          />\r\n          </FormControl>\r\n          <Typography>Filter</Typography>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <DateTimePicker \r\n              label=\"Start Time\"\r\n              value={appSetting.filter.time[0]} \r\n              onChange={handleTimeChange(0)} \r\n              error={false}\r\n              clearable\r\n            />\r\n            <DateTimePicker \r\n              label=\"End Time\"\r\n              value={appSetting.filter.time[1]} \r\n              onChange={handleTimeChange(1)} \r\n              error={false}\r\n              clearable\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className={`${classes.filterControl}`}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"filter-key-select-label\">Filter Key</InputLabel>\r\n              <Select\r\n                labelId=\"filter-key-select-label\"\r\n                id=\"filter-key-select\"\r\n                value={appSetting.filter.text[0]}\r\n                onChange={handleTextChange(0)}\r\n              >\r\n                {Object.entries(keys).map(([key, column]) => (\r\n                  <MenuItem key={key} value={key}>{column}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <TextField \r\n              fullWidth \r\n              id=\"filter-text\" \r\n              label=\"Filter Text\" \r\n              onChange={handleTextChange(1)}\r\n              value={appSetting.filter.text[1]}\r\n            />\r\n          </FormGroup>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport MqttConnectDialog from 'components/dialogs/MqttConnectDialog';\r\nimport MqttSubscribeDialog from 'components/dialogs/MqttSubscribeDialog';\r\nimport MqttPublishDialog from 'components/dialogs/MqttPublishDialog';\r\nimport AppSettingsDialog from 'components/dialogs/AppSettingsDialog';\r\n\r\nexport default function DialogWrapper(props) {\r\n    const {\r\n        open,\r\n        openDialogs\r\n    } = props;\r\n    return (\r\n        <>\r\n            <MqttConnectDialog \r\n                open={open.openConnectDialog}\r\n                onChange={openDialogs.connect}\r\n            />\r\n            <MqttSubscribeDialog \r\n                open={open.openSubscribeDialog}\r\n                onChange={openDialogs.subscribe}\r\n            />\r\n            <MqttPublishDialog \r\n                open={open.openPublishDialog}\r\n                onChange={openDialogs.publish}\r\n            />\r\n            <AppSettingsDialog \r\n                open={open.openSettingsDialog}\r\n                onChange={openDialogs.settings}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from 'components/NavBar';\r\nimport MessageTable from 'components/tables/MessageTable';\r\nimport ConfigActions from 'components/ConfigActions';\r\nimport AlertMessage from 'components/AlertMessage';\r\nimport DialogWrapper from 'components/dialogs/DialogWrapper';\r\n\r\nfunction App() {\r\n  const [hideActionBtn, setHideActionBtn] = React.useState(false);\r\n  const [openConnectDialog, setOpenConnectDialog] = React.useState(false);\r\n  const [openSubscribeDialog, setOpenSubscribeDialog] = React.useState(false);\r\n  const [openPublishDialog, setOpenPublishDialog] = React.useState(false);\r\n  const [openSettingsDialog, setOpenSettingsDialog] = React.useState(false);\r\n\r\n  const openDialogs = {\r\n    connect: setOpenConnectDialog,\r\n    subscribe: setOpenSubscribeDialog,\r\n    publish: setOpenPublishDialog,\r\n    settings: setOpenSettingsDialog\r\n  }\r\n\r\n  const setOpenDialog = (name) => {\r\n    openDialogs[name](true);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <NavBar\r\n        hidden={hideActionBtn}\r\n        onChange={setHideActionBtn}\r\n      />\r\n      <MessageTable></MessageTable>\r\n      <ConfigActions\r\n        hidden={hideActionBtn}\r\n        onClick={setOpenDialog}\r\n      />\r\n      <AlertMessage></AlertMessage>\r\n      <DialogWrapper \r\n        open={{openConnectDialog, openSubscribeDialog, openPublishDialog, openSettingsDialog}}\r\n        openDialogs={openDialogs}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"sourceRoot":""}