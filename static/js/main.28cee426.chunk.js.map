{"version":3,"sources":["hooks/context/Contexts.js","components/MqttStatus.js","components/NavBar.js","components/tables/ActionsRow.js","components/tables/MessageRow.js","components/tables/MessageTable.js","components/ConfigActions.js","components/AlertMessage.js","components/dialogs/MqttConnectDialog.js","components/dialogs/MqttSubscribeDialog.js","components/dialogs/DialogWrapper.js","App.js","serviceWorker.js","hooks/useLocalStorage.js","hooks/context/MqttSettingProvider.js","hooks/context/MqttProvider.js","hooks/context/AlertProvider.js","errorBoundary/ErrorBoundary.js","hooks/AppContextProvider.js","index.js"],"names":["MqttSettingContext","React","createContext","MqttContext","AlertContext","MqttStatus","useContext","mqttSetting","mqttState","Box","Chip","label","status","toUpperCase","url","subscribedTo","topic","avatar","Avatar","qos","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","props","hidden","onChange","classes","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","process","FormControlLabel","control","Switch","checked","event","target","useStyles1","flexShrink","marginLeft","TablePaginationActions","useTheme","count","page","rowsPerPage","onChangePage","onClick","disabled","direction","Math","ceil","max","createData","name","calories","fat","sort","a","b","useStyles2","table","minWidth","ActionsRow","onChangeRowsPerPage","rowsPerPageOptions","colSpan","SelectProps","TableRow","TablePagination","ActionsComponent","useRowStyles","borderBottom","container","marginTop","MessageRow","columns","collpasedColumns","row","useState","open","setOpen","Object","keys","length","Fragment","TableCell","size","map","column","key","Date","toLocaleString","style","paddingBottom","paddingTop","Collapse","in","timeout","unmountOnExit","margin","gutterBottom","component","Table","TableHead","entries","TableBody","time","message","retain","dup","CollapsibleTable","setPage","setRowsPerPage","Container","maxWidth","TableContainer","Paper","messages","reverse","slice","index","TableFooter","inputProps","native","newPage","parseInt","value","transform","configActionsWrapper","height","radioGroup","speedDial","bottom","right","top","left","ConfigActions","onConnectClick","onSubscribeClick","dispatch","handleClose","actions","icon","handler","type","SpeedDial","ariaLabel","SpeedDialIcon","onClose","onOpen","action","SpeedDialAction","tooltipTitle","tooltipOpen","width","AlertMessage","alert","setAlert","console","log","Alert","severity","display","flexWrap","withoutLabel","textField","MqttConnectDialog","showPassword","setShowPassword","setMqttSetting","handleChange","prop","credentialInputs","TextField","fullWidth","id","username","FormControl","InputLabel","htmlFor","password","endAdornment","InputAdornment","onMouseDown","preventDefault","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","clientId","anomynous","DialogActions","Button","setting","slider","MqttLoginDialog","handleTopicChange","subscribeTo","autoFocus","Slider","defaultValue","min","step","marks","valueLabelDisplay","labelPlacement","DialogWrapper","openConnectDialog","setOpenConnectDialog","openSubscribeDialog","setOpenSubscribeDialog","App","hideActionBtn","setHideActionBtn","Boolean","window","location","hostname","match","PREFIX","endsWith","MqttSettingProvider","children","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","useLocalStorage","protocol","now","toString","Provider","ACTIONS","messageBuffer","timeoutHandle","mqttReducer","state","last","push","packet","setTimeout","updateInterval","newMessages","shift","messagesCount","mqtt","subscribe","error","granted","connected","end","instance","connect","anonymous","undefined","reconnectPeriod","on","unsubscribe","MqttProvider","useReducer","AlertProvider","ErrorBoundary","hasError","errorInfo","this","Component","AppContextProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.28cee426.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const MqttSettingContext = React.createContext(null);\r\nexport const MqttContext = React.createContext(null);\r\nexport const AlertContext = React.createContext(null);","import React from 'react'\r\nimport Box from '@material-ui/core/Box';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nexport default function MqttStatus() {\r\n    const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n    const [mqttState, dispatch] = React.useContext(MqttContext);\r\n    // const [mqttInstance, setMqttInstance] = mqttState.mqtt;\r\n    // const [status, setStatus] = mqttState.status;\r\n    return (\r\n        <Box>\r\n            <Chip label={`${mqttState.status.toUpperCase()}${mqttState.status === 'connected' ? ` to ${mqttSetting.url}` : ''}`} />\r\n            {/* <Chip label={`${mqttState.messagesCount} message(s)`} /> */}\r\n            {\r\n                mqttState.subscribedTo.topic ? \r\n                    <Chip avatar={<Avatar>{mqttState.subscribedTo.qos}</Avatar>} label={mqttState.subscribedTo.topic} /> :\r\n                    null\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport MqttStatus from 'components/MqttStatus';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function NavBar(props) {\r\n    const {\r\n        hidden,\r\n        onChange\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    \r\n    const handleHiddenChange = (event) => {\r\n        onChange(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {process.env.REACT_APP_WEBSITE_NAME}\r\n                </Typography>\r\n                <MqttStatus></MqttStatus>\r\n                <FormControlLabel\r\n                    control={<Switch checked={hidden} onChange={handleHiddenChange} color=\"primary\" />}\r\n                    label=\"Hide Button\"\r\n                />\r\n                {/* <Button color=\"inherit\">Login</Button> */}\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(name, calories, fat) {\r\n  return { name, calories, fat };\r\n}\r\n\r\nconst rows = [\r\n  createData('Cupcake', 305, 3.7),\r\n  createData('Donut', 452, 25.0),\r\n  createData('Eclair', 262, 16.0),\r\n  createData('Frozen yoghurt', 159, 6.0),\r\n  createData('Gingerbread', 356, 16.0),\r\n  createData('Honeycomb', 408, 3.2),\r\n  createData('Ice cream sandwich', 237, 9.0),\r\n  createData('Jelly Bean', 375, 0.0),\r\n  createData('KitKat', 518, 26.0),\r\n  createData('Lollipop', 392, 0.2),\r\n  createData('Marshmallow', 318, 0),\r\n  createData('Nougat', 360, 19.0),\r\n  createData('Oreo', 437, 18.0),\r\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nexport default function ActionsRow(props) {\r\n  const classes = useStyles2();\r\n  // const [page, setPage] = React.useState(0);\r\n  // const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const { count, page, rowsPerPage, onChangePage, onChangeRowsPerPage, rowsPerPageOptions, colSpan, SelectProps } = props;\r\n  // const handleChangePage = (event, newPage) => {\r\n  //   setPage(newPage);\r\n  // };\r\n\r\n  // const handleChangeRowsPerPage = (event) => {\r\n  //   setRowsPerPage(parseInt(event.target.value, 10));\r\n  //   setPage(0);\r\n  // };\r\n\r\n  return (\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={rowsPerPageOptions}\r\n              colSpan={colSpan}\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={SelectProps}\r\n              onChangePage={onChangePage}\r\n              onChangeRowsPerPage={onChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        borderBottom: 'unset',\r\n      },\r\n    },\r\n    container: {\r\n        marginTop: theme.spacing(2),\r\n    }\r\n  }));\r\n  \r\n  \r\nexport default function MessageRow(props) {\r\n    const { columns, collpasedColumns, row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n\r\n    const colSpan = Object.keys(columns).length + 1;\r\n  \r\n    return (\r\n      <React.Fragment>\r\n        <TableRow className={classes.root}>\r\n          <TableCell>\r\n          { collpasedColumns ?\r\n            <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          : null}\r\n          </TableCell>\r\n          {Object.keys(columns).map((column) => (\r\n              <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n          ))}\r\n        </TableRow>\r\n        { collpasedColumns ? \r\n            <TableRow>\r\n            <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={colSpan}>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <Box margin={1}>\r\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                    Metadata\r\n                    </Typography>\r\n                    <Table size=\"small\" aria-label=\"purchases\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                        {Object.entries(collpasedColumns).map(([key, column]) => (\r\n                            <TableCell key={key}>{column}</TableCell>\r\n                        ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <TableRow>\r\n                            {Object.keys(collpasedColumns).map((column) => (\r\n                                <TableCell key={column}>{column === 'time' ? new Date(row[column]).toLocaleString() : row[column]}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableBody>\r\n                    </Table>\r\n                </Box>\r\n                </Collapse>\r\n            </TableCell>\r\n            </TableRow>\r\n        : null}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  // MessageRow.propTypes = {\r\n  //   row: PropTypes.shape({\r\n  //     calories: PropTypes.number.isRequired,\r\n  //     carbs: PropTypes.number.isRequired,\r\n  //     fat: PropTypes.number.isRequired,\r\n  //     history: PropTypes.arrayOf(\r\n  //       PropTypes.shape({\r\n  //         amount: PropTypes.number.isRequired,\r\n  //         customerId: PropTypes.string.isRequired,\r\n  //         date: PropTypes.string.isRequired,\r\n  //       }),\r\n  //     ).isRequired,\r\n  //     name: PropTypes.string.isRequired,\r\n  //     price: PropTypes.number.isRequired,\r\n  //     protein: PropTypes.number.isRequired,\r\n  //   }).isRequired,\r\n  // };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { MqttContext } from 'hooks/context/Contexts';\r\nimport ActionsRow from 'components/tables/ActionsRow';\r\nimport MessageRow from 'components/tables/MessageRow';\r\n\r\nconst useRowStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n  container: {\r\n      marginTop: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nconst columns = {\r\n    time: 'Time',\r\n    topic: 'Topic',\r\n    // qos: 'QoS',\r\n    // retain: 'Retained',\r\n    // dup: 'Duplicate',\r\n    message: 'Message'\r\n}\r\n\r\nconst collpasedColumns = {\r\n    // time: 'Time',\r\n    // topic: 'Topic',\r\n    qos: 'QoS',\r\n    retain: 'Retained',\r\n    dup: 'Duplicate',\r\n    // message: 'Message'\r\n}\r\n\r\nexport default function CollapsibleTable() {\r\n  const classes = useRowStyles();\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  return (\r\n    <Container maxWidth=\"xl\" className={classes.container}>\r\n        <TableContainer component={Paper}>\r\n        <Table size=\"small\" aria-label=\"collapsible table\">\r\n            <TableHead>\r\n            <TableRow>\r\n                <TableCell />\r\n                {Object.entries(columns).map(([key, column]) => (\r\n                    <TableCell key={key}>{column}</TableCell>\r\n                ))}\r\n                {/* <TableCell align=\"right\">Calories</TableCell>\r\n                <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n                <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n                <TableCell align=\"right\">Protein&nbsp;(g)</TableCell> */}\r\n            </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n            {[...mqttState.messages].reverse().slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((message, index) => (\r\n                <MessageRow \r\n                  key={index} \r\n                  row={message}\r\n                  columns={columns}\r\n                  collpasedColumns={collpasedColumns}\r\n                />\r\n            ))}\r\n            </TableBody>\r\n            <TableFooter>\r\n              <ActionsRow\r\n                rowsPerPageOptions={[10, 25, 50]}\r\n                colSpan={7}\r\n                count={mqttState.messages.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n        </TableFooter>\r\n        </Table>\r\n        </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport CancelPresentationIcon from '@material-ui/icons/CancelPresentation';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\r\nimport RemoveFromQueueIcon from '@material-ui/icons/RemoveFromQueue';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport HistoryIcon from '@material-ui/icons/History';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nimport 'components/ConfigActions.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    transform: 'translateZ(0px)',\r\n    flexGrow: 1,\r\n  },\r\n  configActionsWrapper: {\r\n    position: 'relative',\r\n    marginTop: theme.spacing(3),\r\n    height: 380,\r\n  },\r\n  radioGroup: {\r\n    margin: theme.spacing(1, 0),\r\n  },\r\n  speedDial: {\r\n    position: 'fixed',\r\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n      top: theme.spacing(2),\r\n      left: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ConfigActions(props) {\r\n  const {\r\n      hidden,\r\n      onConnectClick,\r\n      onSubscribeClick\r\n  } = props;\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n//   const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    handleClose();\r\n    onConnectClick(true);\r\n  }\r\n\r\n  const handleDisconnect = () =>{\r\n    if(mqttState.status === 'connected') dispatch({type: 'disconnect', dispatch});\r\n  }\r\n\r\n  const handleUnsubscribe = () =>{\r\n    if(mqttState.subscribedTo.topic) dispatch({type: 'unsubscribe', dispatch});\r\n  }\r\n\r\n  const handleSubscribe = () => {\r\n    if(true || mqttState.status === 'connected'){\r\n        handleClose();\r\n        onSubscribeClick(true);\r\n    }\r\n  }\r\n\r\n  const actions = [\r\n    { \r\n        icon: <InputIcon />, \r\n        name: 'Connect', \r\n        handler: handleConnect, \r\n        open: true\r\n    },\r\n    { \r\n        icon: <CancelPresentationIcon />, \r\n        name: 'Disconnect', \r\n        handler: handleDisconnect, \r\n        open: mqttState.status === 'connected'// ? true : false \r\n    },\r\n    { \r\n        icon: <AddToQueueIcon />, \r\n        name: 'Subscribe', \r\n        handler: handleSubscribe,\r\n        open: mqttState.status === 'connected'// ? true : false \r\n    },\r\n    { \r\n        icon: <RemoveFromQueueIcon />, \r\n        name: 'Unsubscribe',\r\n        handler: handleUnsubscribe,\r\n        open: mqttState.subscribedTo.topic ? true : false \r\n    },\r\n    { \r\n        icon: <PublishIcon />, \r\n        name: 'Publish' ,\r\n        open: mqttState.status === 'connected'// ? true : false \r\n    },\r\n    { \r\n        icon: <HistoryIcon />, \r\n        name: 'History',\r\n        open: mqttState.messages ? true : false \r\n    },\r\n    { \r\n        icon: <SettingsIcon />, \r\n        name: 'Settings',\r\n        open: mqttState.messages ? true : false \r\n    },\r\n  ];\r\n\r\n  return (\r\n        <SpeedDial\r\n          ariaLabel=\"SpeedDial example\"\r\n          className={`${classes.speedDial} ConfigActions ${hidden ? 'ConfigActions-hide' : ''}`}\r\n          hidden={hidden}\r\n          icon={<SpeedDialIcon />}\r\n          // icon={<SpeedDialIcon openIcon={<SettingsIcon />}/>}\r\n          onClose={handleClose}\r\n          onOpen={handleOpen}\r\n          open={open}\r\n          direction=\"up\"\r\n        >\r\n          {actions.map((action) => {\r\n            if(action.open) return(\r\n              <SpeedDialAction\r\n                key={action.name}\r\n                icon={action.icon}\r\n                tooltipTitle={action.name}\r\n                onClick={action.handler}\r\n                tooltipOpen={action.open}\r\n              />\r\n            )\r\n          })}\r\n        </SpeedDial>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    top: theme.spacing(10),\r\n    // left: theme.spacing(2),\r\n    // marginRight: theme.spacing(4),\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function AlertMessage() {\r\n  const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(false);\r\n  const [alert, setAlert] = React.useContext(AlertContext);\r\n  console.log(alert)\r\n  const handleClose = () => {\r\n    setAlert([])\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {alert.length > 1 ? \r\n        <Alert severity={alert[0]} onClose={handleClose}>{alert[1]}</Alert>\r\n      : null}\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n}));\r\n\r\n\r\nexport default function MqttConnectDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // setOpen(false);\r\n    onChange(false);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleConnect = () => {\r\n    dispatch({type: 'connect', setting: mqttSetting});\r\n  }\r\n\r\n  const handlDisconnect = () =>{\r\n    dispatch({type: 'disconnect'});\r\n  }\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    console.log(event.target.checked)\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      [prop]: event.target.type === 'checkbox' ? event.target.checked : event.target.value \r\n    });\r\n  };\r\n\r\n  const credentialInputs = (\r\n    <>\r\n      <TextField \r\n        fullWidth \r\n        className={classes.margin} \r\n        id=\"mqtt-username\" \r\n        label=\"Username\"\r\n        value={mqttSetting.username}\r\n        onChange={handleChange('username')}\r\n      />\r\n      <FormControl fullWidth className={classes.margin}>\r\n        <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\r\n        <Input\r\n          id=\"standard-adornment-password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          value={mqttSetting.password}\r\n          onChange={handleChange('password')}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={handleClickShowPassword}\r\n                onMouseDown={handleMouseDownPassword}\r\n              >\r\n                {showPassword ? <Visibility /> : <VisibilityOff />}\r\n              </IconButton>\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </FormControl>\r\n    </>\r\n  )\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"connect-dialog-title\">\r\n        <DialogTitle id=\"connect-dialog-title\">Connect to MQTT</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Connect to a MQTT server over WebSocket.\r\n          </DialogContentText>\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <InputLabel htmlFor=\"standard-adornment-amount\">URL</InputLabel>\r\n            <Input\r\n              id=\"standard-adornment-url\"\r\n              value={mqttSetting.url}\r\n              onChange={handleChange('url')}\r\n              // startAdornment={<InputAdornment position=\"start\">ws://</InputAdornment>}\r\n            />\r\n          </FormControl>\r\n          <TextField \r\n            fullWidth \r\n            className={classes.margin} \r\n            id=\"mqtt-clientId\" \r\n            label=\"Client ID\"\r\n            value={mqttSetting.clientId}\r\n            onChange={handleChange('clientId')}\r\n          />\r\n          <FormControl fullWidth className={classes.margin}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={mqttSetting.anomynous}\r\n                  onChange={handleChange('anomynous')}\r\n                  name=\"anomynous\"\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label=\"Anomynous\"\r\n              // labelPlacement=\"start\"\r\n            />\r\n          </FormControl>\r\n          {mqttSetting.anomynous ? null : credentialInputs}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handlDisconnect} color=\"primary\">\r\n            Disconnect\r\n          </Button>\r\n          <Button onClick={handleConnect} color=\"primary\">\r\n            Connect\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { MqttSettingContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: '25ch',\r\n  },\r\n  slider: {\r\n    width: '100px',\r\n    marginLeft: theme.spacing(2),\r\n  }\r\n}));\r\n\r\nexport default function MqttLoginDialog(props) {\r\n  const classes = useStyles();\r\n  const {open, onChange} = props;\r\n//   const [open, setOpen] = React.useState(false);\r\n  const [mqttSetting, setMqttSetting] = React.useContext(MqttSettingContext);\r\n  const [mqttState, dispatch] = React.useContext(MqttContext);\r\n  // console.log(mqttSetting)\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    // setOpen(false);\r\n    onChange(false);\r\n  };\r\n\r\n  const handleSubscribe = () => {\r\n    dispatch({type: 'subscribe', setting: mqttSetting, dispatch});\r\n  }\r\n\r\n  const handlUnsubscribe = () =>{\r\n    dispatch({type: 'unsubscribe', dispatch});\r\n  }\r\n\r\n  const handleTopicChange = (prop) => (event, value) => {\r\n    // const index = prop == 'topic' ? 0 : prop = 'qos' ? 1 : -1;\r\n    // if(index < 0) return;\r\n    // let array = [...mqttSetting.topic];\r\n    // array.splice(index, 1, typeof value === 'undefined' ? event.target.value : value);\r\n    setMqttSetting({ \r\n      ...mqttSetting, \r\n      subscribeTo : {\r\n        ...mqttSetting.subscribeTo, \r\n        [prop]: typeof value === 'undefined' ? event.target.value : value}\r\n    });\r\n  };\r\n\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: '0'\r\n    },\r\n    {\r\n      value: 1,\r\n      label: '1'\r\n    },\r\n    {\r\n      value: 2,\r\n      label: '2'\r\n    },\r\n  ]\r\n\r\n  return (\r\n      <Dialog fullWidth open={open} onClose={handleClose} aria-labelledby=\"subscribe-dialog-title\">\r\n        <DialogTitle id=\"subscribe-dialog-title\">Subscribe</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Subscribe to a MQTT topic.\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            id=\"topic\"\r\n            label=\"Topic\"\r\n            type=\"text\"\r\n            fullWidth\r\n            className={classes.margin} \r\n            onChange={handleTopicChange('topic')}\r\n            value={mqttSetting.subscribeTo.topic}\r\n          />\r\n            <FormControlLabel\r\n              control={\r\n                <Slider\r\n                  defaultValue={mqttSetting.subscribeTo.qos}\r\n                  min={0}\r\n                  max={2}\r\n                  // getAriaValueText={valuetext}\r\n                  aria-labelledby=\"discrete-slider-always\"\r\n                  step={1}\r\n                  marks={marks}\r\n                  valueLabelDisplay=\"off\"\r\n                  className={classes.slider} \r\n                  onChange={handleTopicChange('qos')}\r\n                />\r\n              }\r\n              label=\"Qos\"\r\n              labelPlacement=\"start\"\r\n              className={classes.margin} \r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handlUnsubscribe} color=\"primary\">\r\n            Unsubscribe\r\n          </Button>\r\n          <Button onClick={handleSubscribe} color=\"primary\">\r\n            Subscribe\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport MqttConnectDialog from 'components/dialogs/MqttConnectDialog';\r\nimport MqttSubscribeDialog from 'components/dialogs/MqttSubscribeDialog';\r\n\r\nexport default function DialogWrapper(props) {\r\n    const {\r\n        open,\r\n        onChange\r\n    } = props;\r\n    return (\r\n        <>\r\n            <MqttConnectDialog \r\n                open={open.openConnectDialog}\r\n                onChange={onChange.setOpenConnectDialog}\r\n            />\r\n            <MqttSubscribeDialog \r\n                open={open.openSubscribeDialog}\r\n                onChange={onChange.setOpenSubscribeDialog}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from 'components/NavBar';\r\nimport MessageTable from 'components/tables/MessageTable';\r\nimport ConfigActions from 'components/ConfigActions';\r\nimport AlertMessage from 'components/AlertMessage';\r\nimport DialogWrapper from 'components/dialogs/DialogWrapper';\r\n\r\nfunction App() {\r\n  const [hideActionBtn, setHideActionBtn] = React.useState(false);\r\n  const [openConnectDialog, setOpenConnectDialog] = React.useState(false);\r\n  const [openSubscribeDialog, setOpenSubscribeDialog] = React.useState(false);\r\n\r\n  return (\r\n    <>\r\n      <NavBar\r\n        hidden={hideActionBtn}\r\n        onChange={setHideActionBtn}\r\n      />\r\n      <MessageTable></MessageTable>\r\n      <ConfigActions\r\n        hidden={hideActionBtn}\r\n        onConnectClick={setOpenConnectDialog}\r\n        onSubscribeClick={setOpenSubscribeDialog}\r\n      />\r\n      <AlertMessage></AlertMessage>\r\n      <DialogWrapper \r\n        open={{openConnectDialog, openSubscribeDialog}}\r\n        onChange={{setOpenConnectDialog, setOpenSubscribeDialog}}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { useState, useEffect} from 'react'\r\n\r\nconst PREFIX = process.env.REACT_APP_LOCAL_STORAGE_PREFIX.endsWith('-') ? \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX : \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX + '-';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key;\r\n\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n        return typeof initialValue === 'function' ? initialValue() : initialValue\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React from 'react';\r\nimport os from 'os';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport { MqttSettingContext } from 'hooks/context/Contexts';\r\n\r\nexport default function MqttSettingProvider({ children }){\r\n\r\n  const [mqttSetting, setMqttSetting] = useLocalStorage('mqttSetting', {\r\n    url: window.location.protocol === 'https:' ? 'wss://' : 'ws://',\r\n    clientId: `mqtt-ws-client-${Date.now().toString(36)}`,\r\n    anomynous: false,\r\n    username: '',\r\n    password: '',\r\n    topic: ['', 0],\r\n    subscribeTo: {topic: '', qos: 0}\r\n  })\r\n\r\n  return <MqttSettingContext.Provider value={[mqttSetting, setMqttSetting]}>{children}</MqttSettingContext.Provider>\r\n}","import React from 'react';\r\nimport mqtt from 'mqtt';\r\nimport MqttSettingProvider from 'hooks/context/MqttSettingProvider';\r\nimport { AlertContext,  MqttContext} from 'hooks/context/Contexts';\r\n\r\nconst ACTIONS = {\r\n  INIT: 'init',\r\n  CONNECT: 'connect',\r\n  SUBSCRIBE: 'subscribe',\r\n  SUBSCRIBED: 'subscribed',\r\n  UNSUBSCRIBE: 'unsubscribe',\r\n  UNSUBSCRIBED: 'unsubscribed',\r\n  PUBLISH: 'publish',\r\n  DISCONNECT: 'disconnect',\r\n  ON_CONNECT: 'onConnect',\r\n  ON_RECONNECT: 'onReconnect',\r\n  ON_CLOSE: 'onClose',\r\n  ON_OFFLINE: 'onOffline',\r\n  ON_ERROR: 'onError',\r\n  ON_MESSAGE: 'onMessage',\r\n  UPDATE_STATUS: 'updateStatus',\r\n  UPDATE_MESSAGES: 'updateMessages'\r\n}\r\n\r\nlet messageBuffer = [{messages: []}];\r\nlet timeoutHandle = null;\r\n\r\nconst mqttReducer = (state, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.ON_MESSAGE:\r\n      let last = messageBuffer.length - 1;\r\n      messageBuffer[last].messages.push({\r\n        topic: action.topic, \r\n        message: action.message.toString(), \r\n        qos: action.packet.qos, \r\n        retain: action.packet.retain, \r\n        dup: action.packet.dup, \r\n        time: Date.now()\r\n      }) \r\n      if(!timeoutHandle){\r\n        timeoutHandle = setTimeout(() => state.dispatch({type: ACTIONS.UPDATE_MESSAGES}), state.updateInterval)\r\n      }\r\n      return state;\r\n    case ACTIONS.UPDATE_MESSAGES:\r\n      messageBuffer.push({messages: []});\r\n      timeoutHandle = null;\r\n      let newMessages = messageBuffer[0].messages;\r\n      messageBuffer.shift();\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...newMessages],\r\n        messagesCount: state.messagesCount+newMessages.length\r\n      };\r\n    case ACTIONS.SUBSCRIBE:\r\n      if(!state.subscribedTo.topic){\r\n        const topic = {[action.setting.subscribeTo.topic]: {qos: action.setting.subscribeTo.qos}};\r\n        state.mqtt.subscribe(topic, (error, granted) => {\r\n          if(!error && granted[0].qos <= 2) state.dispatch({type: ACTIONS.SUBSCRIBED, granted: granted[0]})\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.SUBSCRIBED:\r\n      // console.log(action.type);\r\n      return {...state, subscribedTo: action.granted};\r\n    case ACTIONS.INIT:\r\n      return {...state, dispatch: action.dispatch};\r\n    case ACTIONS.CONNECT:\r\n      // console.log(state.mqtt)\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      const mqttSetting = action.setting;\r\n      // const brokerUrl = 'ws://' + mqttSetting.url;\r\n      try {        \r\n        const instance = mqtt.connect(mqttSetting.url, {\r\n          ...mqttSetting,\r\n          username: mqttSetting.anonymous ? undefined : mqttSetting.username,\r\n          password: mqttSetting.anonymous ? undefined : mqttSetting.password,\r\n          reconnectPeriod: 0\r\n        });\r\n        instance.on('connect', () => state.dispatch({type: ACTIONS.ON_CONNECT, status: 'connected'}));\r\n        instance.on('reconnect', () => state.dispatch({type: ACTIONS.ON_RECONNECT, status: 'reconnecting'}));\r\n        instance.on('close', () => state.dispatch({type: ACTIONS.ON_CLOSE, status: 'closed'}));\r\n        instance.on('offline', () => state.dispatch({type: ACTIONS.ON_OFFLINE, status: 'offline'}));\r\n        instance.on('error', (error) => state.dispatch({type: ACTIONS.ON_ERROR, error}));\r\n        instance.on('message', (topic, message, packet) => state.dispatch({type: ACTIONS.ON_MESSAGE, topic, message, packet, dispatch: action.dispatch}));\r\n        state.setAlert(['info', 'Connecting...'])\r\n        return {...state, mqtt:instance};\r\n      } catch (error) {\r\n        console.log(error)\r\n        // state.setAlert(['error', error])\r\n        return state;\r\n      }\r\n    case ACTIONS.DISCONNECT:\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      state.dispatch({type: ACTIONS.UNSUBSCRIBED});\r\n      return state;\r\n    case ACTIONS.UNSUBSCRIBE:\r\n      if(state.subscribedTo.topic){\r\n        state.mqtt.unsubscribe(state.subscribedTo.topic, (error) => {\r\n          if(!error) state.dispatch({type: ACTIONS.UNSUBSCRIBED});\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.UNSUBSCRIBED:\r\n      // clearTimeout(timeoutHandle);\r\n      // state.dispatch({type: ACTIONS.UPDATE_MESSAGES});\r\n      return {...state, subscribedTo: {topic: '', qos: 0}};\r\n    case ACTIONS.ON_ERROR:\r\n      console.log(action.error);\r\n      return {...state, error: action.error};\r\n    case ACTIONS.UPDATE_STATUS:\r\n    case ACTIONS.ON_CONNECT:\r\n    case ACTIONS.ON_RECONNECT:\r\n    case ACTIONS.ON_CLOSE:\r\n    case ACTIONS.ON_OFFLINE:\r\n      // console.log(action.type)\r\n      // console.log(state.mqtt)\r\n      return {...state, status: action.status};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default function MqttProvider({ children }){\r\n  // const [mqttInstance, setMqttInstance] = React.useState(null);\r\n  // const [status, setStatus] = React.useState('offline');\r\n  const [alert, setAlert] = React.useContext(AlertContext);\r\n  \r\n  \r\n  const [state, dispatch] = React.useReducer(mqttReducer, {\r\n    dispatch: null,\r\n    updateInterval: 100,\r\n    mqtt: null,\r\n    status: 'offline',\r\n    subscribedTo: {topic: '', qos: 0},\r\n    messages: [],\r\n    messagesCount: 0,\r\n    setAlert\r\n  })\r\n  \r\n  React.useEffect(() => {\r\n    dispatch({type: ACTIONS.INIT, dispatch});\r\n    return () => {\r\n      if(mqtt && mqtt.connected) state.mqtt.end();\r\n    }\r\n  }, [mqtt])\r\n  return (\r\n      <MqttContext.Provider value={[state, dispatch]}>{children}</MqttContext.Provider>\r\n  )\r\n}","import React from 'react';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nexport default function AlertProvider({ children }){\r\n\r\n  const [alert, setAlert] = React.useState(['error','test error']);\r\n\r\n  return <AlertContext.Provider value={[alert, setAlert]}>{children}</AlertContext.Provider>\r\n}","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      // 更新 state 以至於下一個 render 會顯示 fallback UI\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n      // 你也可以把錯誤記錄到一個錯誤回報系統服務\r\n    //   logErrorToMyService(error, errorInfo);\r\n        console.log(error, errorInfo)\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // 你可以 render 任何客製化的 fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children;\r\n    }\r\n  }","import React from 'react'\r\nimport MqttProvider from 'hooks/context/MqttProvider';\r\nimport MqttSettingProvider from 'hooks/context/MqttSettingProvider';\r\nimport AlertProvider from 'hooks/context/AlertProvider';\r\nimport ErrorBoundary from 'errorBoundary/ErrorBoundary';\r\n\r\nexport * from 'hooks/context/Contexts';\r\n\r\nexport default function AppContextProvider({ children }){\r\n    return (\r\n        <ErrorBoundary>\r\n            <AlertProvider>\r\n                <MqttSettingProvider>\r\n                    <MqttProvider>\r\n                        { children }\r\n                    </MqttProvider>\r\n                </MqttSettingProvider>\r\n            </AlertProvider>\r\n        </ErrorBoundary>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppContextProvider from 'hooks/AppContextProvider';\r\n\r\nReactDOM.render(\r\n  <AppContextProvider>\r\n    <App />\r\n  </AppContextProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}