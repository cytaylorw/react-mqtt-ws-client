{"version":3,"sources":["lib/i18n/zhTW.js","lib/i18n/enUS.js","serviceWorker.js","hooks/context/MqttProvider.js","hooks/useLocalStorage.js","hooks/context/MqttSettingProvider.js","hooks/context/AppSettingProvider.js","hooks/context/AlertProvider.js","errorBoundary/ErrorBoundary.js","components/themes/AppThemeProvider.js","hooks/AppContextProvider.js","index.js","hooks/context/Contexts.js","lib/converter/MessageConverter.js"],"names":["exports","zhTW","props","MuiBreadcrumbs","expandText","MuiTablePagination","backIconButtonText","labelRowsPerPage","labelDisplayedRows","from","to","count","nextIconButtonText","MuiRating","getLabelText","value","emptyLabelText","MuiAutocomplete","clearText","closeText","loadingText","noOptionsText","openText","MuiAlert","MuiPagination","getItemAriaLabel","type","page","selected","text","ConfigActions","connect","disconnect","subscribe","unsubscribe","publish","settings","MessageTable","rowsPerPage","noMessage","NavBar","hideButton","showButton","MqttStatus","connected","reconnecting","closed","offline","ConfigDialog","closeBtn","MqttConnectDialog","connectBtn","disconnectBtn","title","contentText","anomynousLabel","basicAuthLabel","usernameLabel","passwordLabel","AppSettingsDialog","localeLabel","darkModeLabel","lightModeLabel","startTimeLabel","endTimeLabel","filter","filterOnLabel","filterOffLabel","filterKeyLabel","filterTextLabel","langauges","enUS","TopicTextField","topicLabel","QosSlider","qosLabel","MqttSubscribeDialog","subscribeBtn","unsubscribeBtn","converterLabel","MqttPublishDialog","publishBtn","messageLabel","messagePlaceholder","messages","MQTT_CONNECT","url","MQTT_CONNECT_TIMEOUT","MQTT_DISCONNECT","MQTT_SUBSCRIBE","topic","MQTT_SUBSCRIBE_FAIL","MQTT_UNSUBSCRIBE","MQTT_PUBLISHED","MQTT_ON_CONNECT","MQTT_ON_CLOSE","MQTT_ON_RECONNECT","MQTT_ON_OFFLINE","MQTT_PLAY","MQTT_PAUSE","FILTER_INVALID_TIME_RANGE","CONVERTER_INVALID","Boolean","window","location","hostname","match","ACTIONS","messageBuffer","timeoutHandle","connectTimeout","alertTimeout","setAlertTimeout","state","alert","clearTimeout","setTimeout","setAlert","clearAlert","mqttReducer","action","last","length","push","messageConverter","subscribedTo","converter","pause","dispatch","updateInterval","newMessages","shift","messagesCount","mqtt","end","mqttSetting","setting","instance","username","anomynous","undefined","password","reconnectPeriod","on","status","error","message","packet","console","log","JSON","stringify","subscribeTo","qos","granted","publishTo","MqttProvider","children","React","useContext","AlertContext","useReducer","useEffect","Provider","PREFIX","process","endsWith","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","parse","setValue","setItem","MqttSettingProvider","protocol","clientId","Date","now","toString","locale","setMqttSetting","userLang","navigator","language","userLanguage","split","join","AppSettingProvider","darkMode","filterOn","time","appSetting","setAppSetting","timeoutHandler","defaultMessages","AlertProvider","theme","useTheme","severity","errorCode","arg","timeout","ErrorBoundary","hasError","errorInfo","this","style","margin","Component","moment","supportLocales","Object","keys","locales","AppThemeProvider","AppSettingContext","useMemo","createMuiTheme","typography","fontFamily","palette","primary","light","main","dark","secondary","defaultLocales","i18n","component","defaultText","ThemeProvider","utils","MomentUtils","substring","AppContextProvider","App","lazy","ReactDOM","render","fallback","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","createContext","MqttSettingContext","MqttContext","defaultShort","data","columns","default","collpasedColumns","defaultFull","cmd","retain","dup","types","label"],"mappings":"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","file":"static/js/main.99190f47.chunk.js","sourcesContent":["exports.zhTW = {\r\n    props: {\r\n      MuiBreadcrumbs: {\r\n        expandText: '顯示路徑',\r\n      },\r\n      MuiTablePagination: {\r\n        backIconButtonText: '上一頁',\r\n        labelRowsPerPage: '每頁筆數：',\r\n        labelDisplayedRows: ({ from, to, count }) =>\r\n    `${from}-${to}  共${count !== -1 ? count : `大於 ${to}`}`,\r\n        nextIconButtonText: '下一頁',\r\n      },\r\n      MuiRating: {\r\n        getLabelText: value => `${value}星`,\r\n        emptyLabelText: '無',\r\n      },\r\n      MuiAutocomplete: {\r\n        clearText: '清除',\r\n        closeText: '關閉',\r\n        loadingText: '載入中…',\r\n        noOptionsText: '無選項',\r\n        openText: '開啟',\r\n      },\r\n      MuiAlert: {\r\n        closeText: '關閉',\r\n      },\r\n      MuiPagination: {\r\n        'aria-label': '分頁導覽',\r\n        getItemAriaLabel: (type, page, selected) => {\r\n          if (type === 'page') {\r\n            return `第${page}頁`;\r\n          }\r\n          if (type === 'first') {\r\n            return '第一頁';\r\n          }\r\n          if (type === 'last') {\r\n            return '最後一頁';\r\n          }\r\n          if (type === 'next') {\r\n            return '下一頁';\r\n          }\r\n          if (type === 'previous') {\r\n            return '上一頁';\r\n          }\r\n          return undefined;\r\n        },\r\n      },\r\n    },\r\n    text: {\r\n      ConfigActions: {\r\n        connect: '連線',\r\n        disconnect: '中斷連線',\r\n        subscribe: '訂閱',\r\n        unsubscribe: '取消訂閱',\r\n        publish: '發布',\r\n        settings: '設定'\r\n      },\r\n      MessageTable: {\r\n        rowsPerPage: '每頁筆數',\r\n        noMessage: '無訊息可顯示。'\r\n      },\r\n      NavBar: {\r\n        hideButton: '隱藏按鈕',\r\n        showButton: '顯示按鈕'\r\n      },\r\n      MqttStatus: {\r\n        connected: '已連線',\r\n        reconnecting: '重新連線中',\r\n        closed: '已關閉',\r\n        offline: '離線'\r\n      },\r\n      ConfigDialog: {\r\n        closeBtn: '關閉',\r\n      },\r\n      MqttConnectDialog: {\r\n        connectBtn: '連線',\r\n        disconnectBtn: '中斷連線',\r\n        title: '連線至MQTT',\r\n        contentText: '連線至 MQTT server (WebSocket)。',\r\n        // urlLabel: 'URL',\r\n        // clientIdLabel: 'Client ID',\r\n        anomynousLabel: '匿名登入',\r\n        basicAuthLabel: '基本認證',\r\n        usernameLabel: '帳號',\r\n        passwordLabel: '密碼'\r\n      },\r\n      AppSettingsDialog: {\r\n        localeLabel: '語言',\r\n        darkModeLabel: '黑暗模式',\r\n        lightModeLabel: '明亮模式',\r\n        startTimeLabel: '起始時間',\r\n        endTimeLabel: '結束時間',\r\n        filter: '過濾',\r\n        filterOnLabel: '開啟過濾',\r\n        filterOffLabel: '關閉過濾',\r\n        filterKeyLabel: '過濾鍵值',\r\n        filterTextLabel: '過濾內容',\r\n        langauges: {\r\n          enUS: 'English',\r\n          zhTW: '繁體中文'\r\n        },\r\n        title: '設定',\r\n        contentText: 'MQTT Websocket Client 設定。',\r\n      },\r\n      TopicTextField: {\r\n        topicLabel: '主題',\r\n      },\r\n      QosSlider: {\r\n        qosLabel: '品質設定',\r\n      },\r\n      MqttSubscribeDialog: {\r\n        subscribeBtn: '訂閱',\r\n        unsubscribeBtn: '取消訂閱',\r\n        title: '訂閱',\r\n        contentText: '訂閱 MQTT 主題。',\r\n        converterLabel: '轉換器',\r\n      },\r\n      MqttPublishDialog: {\r\n        publishBtn: '發布',\r\n        title: '發布',\r\n        contentText: '發布 MQTT 訊息。',\r\n        messageLabel: '訊息',\r\n        messagePlaceholder: '輸入 MQTT 訊息'\r\n      }\r\n    },\r\n    messages: {\r\n      MQTT_CONNECT: (url) => `${url} 連線中。`,\r\n      MQTT_CONNECT_TIMEOUT: '連線逾時。',\r\n      MQTT_DISCONNECT: '斷線中。',\r\n      MQTT_SUBSCRIBE: (topic) => `${topic} 訂閱中。`,\r\n      MQTT_SUBSCRIBE_FAIL: (topic) => `無法訂閱 ${topic} 。`,\r\n      MQTT_UNSUBSCRIBE: (topic) => `${topic} 取消訂閱中。`,\r\n      MQTT_PUBLISHED: '發布成功。',\r\n      MQTT_ON_CONNECT: '已連線。',\r\n      MQTT_ON_CLOSE: '連線關閉。',\r\n      MQTT_ON_RECONNECT: '重新連線中。',\r\n      MQTT_ON_OFFLINE: 'MQTT 離線。',\r\n      MQTT_PLAY: '更新訊息中。',\r\n      MQTT_PAUSE: '停止訊息更新。',\r\n      FILTER_INVALID_TIME_RANGE: '無效的時間範圍。',\r\n      CONVERTER_INVALID: '此轉換器功能不存在。'\r\n    }\r\n  };","exports.enUS = {\r\n    // text: {\r\n    //   ConfigActions: {\r\n    //     connect: 'Connect',\r\n    //     disconnect: 'Disconnect',\r\n    //     subscribe: 'Subscribe',\r\n    //     unsubscribe: 'Unsubscribe',\r\n    //     publish: 'Publish',\r\n    //     settings: 'Settings'\r\n    //   },\r\n    //   MessageTable: {\r\n    //     rowsPerPage: 'rows per page',\r\n    //     noMessage: 'No message to display.'\r\n    //   },\r\n    //   NavBar: {\r\n    //     hideButton: 'Hide Button',\r\n    //     showButton: 'Show button'\r\n    //   },\r\n    //   MqttStatus: {\r\n    //     connected: 'CONNECTED',\r\n    //     reconnecting: 'RECONNECTING',\r\n    //     closed: 'CLOSED',\r\n    //     offline: 'OFFLINE'\r\n    //   },\r\n    //   ConfigDialog: {\r\n    //     closeBtn: 'Close',\r\n    //   },\r\n    //   MqttConnectDialog: {\r\n    //     connectBtn: 'Connect',\r\n    //     disconnectBtn: 'Disconnect',\r\n    //     title: 'Connect to MQTT',\r\n    //     contentText: 'Connect to a MQTT server over WebSocket.',\r\n    //     urlLabel: 'URL',\r\n    //     clientIdLabel: 'Client ID',\r\n    //     anomynousLabel: 'Anomynous',\r\n    //     basicAuthLabel: 'Basic Authentication',\r\n    //     usernameLabel: 'Username',\r\n    //     passwordLabel: 'Password'\r\n    //   },\r\n    //   AppSettingsDialog: {\r\n    //     localeLabel: 'Language',\r\n    //     darkModeLabel: 'Dark Mode',\r\n    //     lightModeLabel: 'Light Mode',\r\n    //     startTimeLabel: 'Start Time',\r\n    //     endTimeLabel: 'End Time',\r\n    //     filter: 'Filter',\r\n    //     filterOnLabel: 'Filter On',\r\n    //     filterOffLabel: 'Filter Off',\r\n    //     filterKeyLabel: 'Filter Key',\r\n    //     filterTextLabel: 'Filter Text',\r\n    //     langauges: {\r\n    //       enUS: 'English',\r\n    //       zhTW: '繁體中文'\r\n    //     },\r\n    //     title: 'Settings',\r\n    //     contentText: 'Application settings for MQTT Websocket Client.',\r\n    //   },\r\n    //   TopicTextField: {\r\n    //     topicLabel: 'Topic',\r\n    //   },\r\n    //   QosSlider: {\r\n    //     qosLabel: 'QoS',\r\n    //   },\r\n    //   MqttSubscribeDialog: {\r\n    //     subscribeBtn: 'Subscribe',\r\n    //     unsubscribeBtn: 'Unsubscribe',\r\n    //     title: 'Subscribe',\r\n    //     contentText: 'Subscribe to a MQTT topic.',\r\n    //     converterLabel: 'Converter',\r\n    //   },\r\n    //   MqttPublishDialog: {\r\n    //     publishBtn: 'Publish',\r\n    //     title: 'Publish',\r\n    //     contentText: 'Publish a MQTT message.',\r\n    //     messageLabel: 'Message',\r\n    //     messagePlaceholder: 'Enter a MQTT message'\r\n    //   }\r\n    // },\r\n    // messages: {\r\n    //   MQTT_CONNECT: (url) => `Connecting to ${url}...`,\r\n    //   MQTT_CONNECT_TIMEOUT: 'Connection timeout.',\r\n    //   MQTT_DISCONNECT: 'Disconnecting...',\r\n    //   MQTT_SUBSCRIBE: (topic) => `Subscribing to ${topic}...`,\r\n    //   MQTT_SUBSCRIBE_FAIL: (topic) => `Can not subscribe to ${topic}`,\r\n    //   MQTT_UNSUBSCRIBE: (topic) => `Unsubscribing from ${topic}...`,\r\n    //   MQTT_PUBLISHED: 'Published succesfully.',\r\n    //   MQTT_ON_CONNECT: 'Connected.',\r\n    //   MQTT_ON_CLOSE: 'Connection closed.',\r\n    //   MQTT_ON_RECONNECT: 'Reconnecting...',\r\n    //   MQTT_ON_OFFLINE: 'MQTT Offlined.',\r\n    //   MQTT_PLAY: 'Updating messages...',\r\n    //   MQTT_PAUSE: 'Pause message.',\r\n    //   FILTER_INVALID_TIME_RANGE: 'Invalid time range.',\r\n    //   CONVERTER_INVALID: 'Selected converter function does not exist.'\r\n    // }\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport mqtt from 'mqtt';\r\nimport { AlertContext,  MqttContext} from 'hooks/context/Contexts';\r\nimport { messageConverter } from 'lib/converter/MessageConverter';\r\n\r\nconst ACTIONS = {\r\n  INIT: 'init',\r\n  CONNECT: 'connect',\r\n  SUBSCRIBE: 'subscribe',\r\n  SUBSCRIBED: 'subscribed',\r\n  UNSUBSCRIBE: 'unsubscribe',\r\n  UNSUBSCRIBED: 'unsubscribed',\r\n  PUBLISH: 'publish',\r\n  DISCONNECT: 'disconnect',\r\n  ON_CONNECT: 'onConnect',\r\n  ON_RECONNECT: 'onReconnect',\r\n  ON_CLOSE: 'onClose',\r\n  ON_OFFLINE: 'onOffline',\r\n  ON_ERROR: 'onError',\r\n  ON_MESSAGE: 'onMessage',\r\n  UPDATE_STATUS: 'updateStatus',\r\n  UPDATE_MESSAGES: 'updateMessages',\r\n  TOGGLE_PAUSE: 'togglePause',\r\n}\r\n\r\nlet messageBuffer = [{messages: []}];\r\nlet timeoutHandle = null;\r\nlet connectTimeout = null;\r\nlet alertTimeout = null;\r\n\r\nconst setAlertTimeout = (state, alert) => {\r\n  clearTimeout(alertTimeout);\r\n  alertTimeout = setTimeout(() => {\r\n    state.setAlert(alert);\r\n    if(alert[0] === 'info' || alert[0] === 'success') state.clearAlert(1000);\r\n  }, 100)\r\n}\r\n\r\nconst mqttReducer = (state, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.ON_MESSAGE:\r\n      const last = messageBuffer.length - 1;\r\n      messageBuffer[last].messages.push(messageConverter[state.subscribedTo.converter](action));\r\n      if(!timeoutHandle && !state.pause){\r\n        timeoutHandle = setTimeout(() => state.dispatch({type: ACTIONS.UPDATE_MESSAGES}), state.updateInterval)\r\n      }\r\n      return state;\r\n    case ACTIONS.UPDATE_MESSAGES:\r\n      messageBuffer.push({messages: []});\r\n      timeoutHandle = null;\r\n      const newMessages = messageBuffer[0].messages;\r\n      messageBuffer.shift();\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...newMessages],\r\n        messagesCount: state.messagesCount+newMessages.length\r\n      };\r\n    case ACTIONS.INIT:\r\n      return {...state, dispatch: action.dispatch};\r\n    case ACTIONS.CONNECT:\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      const mqttSetting = action.setting;\r\n      try {        \r\n        const instance = mqtt.connect(mqttSetting.url, {\r\n          ...mqttSetting,\r\n          username: mqttSetting.anomynous ? undefined : mqttSetting.username,\r\n          password: mqttSetting.anomynous ? undefined : mqttSetting.password,\r\n          reconnectPeriod: 0\r\n        });\r\n        instance.on('connect', () => state.dispatch({type: ACTIONS.ON_CONNECT, status: 'connected'}));\r\n        instance.on('reconnect', () => state.dispatch({type: ACTIONS.ON_RECONNECT, status: 'reconnecting'}));\r\n        instance.on('close', () => state.dispatch({type: ACTIONS.ON_CLOSE, status: 'closed'}));\r\n        instance.on('offline', () => state.dispatch({type: ACTIONS.ON_OFFLINE, status: 'offline'}));\r\n        instance.on('error', (error) => state.dispatch({type: ACTIONS.ON_ERROR, error}));\r\n        instance.on('message', (topic, message, packet) => state.dispatch({type: ACTIONS.ON_MESSAGE, topic, message, packet}));\r\n        state.setAlert(['info', 'MQTT_CONNECT', mqttSetting.url]);\r\n        connectTimeout = setTimeout(() => state.setAlert(['error', 'MQTT_CONNECT_TIMEOUT']), 5000)\r\n        return {...state, mqtt:instance};\r\n      } catch (error) {\r\n        console.log(JSON.stringify(error))\r\n        state.setAlert(['error', error])\r\n        return state;\r\n      }\r\n    case ACTIONS.DISCONNECT:\r\n      state.setAlert(['info', 'MQTT_DISCONNECT']);\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      state.dispatch({type: ACTIONS.UNSUBSCRIBED});\r\n      return state;\r\n    case ACTIONS.SUBSCRIBE:\r\n      if(!state.subscribedTo.topic){\r\n        state.setAlert(['info', 'MQTT_SUBSCRIBE', state.subscribedTo.topic]);\r\n        const topic = {[action.setting.subscribeTo.topic]: {qos: action.setting.subscribeTo.qos}};\r\n        state.mqtt.subscribe(topic, (error, granted) => {\r\n          if(error){\r\n            state.setAlert(['error', error]);\r\n          }else if(granted[0].qos > 2){\r\n            state.setAlert(['error', 'MQTT_SUBSCRIBE_FAIL', state.subscribedTo.topic]);\r\n          }else{\r\n            state.dispatch({type: ACTIONS.SUBSCRIBED, granted: {...granted[0], converter: action.setting.subscribeTo.converter}})\r\n          }\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.SUBSCRIBED:\r\n      state.clearAlert();\r\n      return {...state, subscribedTo: action.granted};\r\n    case ACTIONS.UNSUBSCRIBE:\r\n      if(state.subscribedTo.topic){\r\n        state.setAlert(['info', 'MQTT_UNSUBSCRIBE', state.subscribedTo.topic]);\r\n        state.mqtt.unsubscribe(state.subscribedTo.topic, (error) => {\r\n          if(error){\r\n            state.setAlert(['error', error]);\r\n          }else{\r\n            state.dispatch({type: ACTIONS.UNSUBSCRIBED})\r\n          }\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.UNSUBSCRIBED:\r\n      state.clearAlert();\r\n      return {...state, subscribedTo: {...state.subscribedTo, topic: '', qos: 0}};\r\n    case ACTIONS.PUBLISH:\r\n      state.mqtt.publish(\r\n          action.setting.publishTo.topic, \r\n          action.setting.publishTo.message, \r\n          {qos: action.setting.publishTo.qos}, \r\n          (error) => {\r\n            if(error){\r\n              state.setAlert(['error', error]);\r\n            }else{\r\n              state.setAlert(['success', 'MQTT_PUBLISHED']);\r\n              state.clearAlert(1000);\r\n            }\r\n      })\r\n      return state;\r\n    case ACTIONS.ON_ERROR:\r\n      console.log(action.error);\r\n      return {...state, error: action.error};\r\n    case ACTIONS.UPDATE_STATUS:\r\n    case ACTIONS.ON_CONNECT:\r\n      clearTimeout(connectTimeout);\r\n      setAlertTimeout(state, ['info', 'MQTT_ON_CONNECT']);\r\n      return {...state, status: action.status};\r\n    case ACTIONS.ON_CLOSE:\r\n      setAlertTimeout(state, ['warning', 'MQTT_ON_CLOSE']);\r\n      return {...state, status: action.status};\r\n    case ACTIONS.ON_RECONNECT:\r\n      setAlertTimeout(state, ['warning', 'MQTT_ON_RECONNECT']);\r\n      return {...state, status: action.status};\r\n    case ACTIONS.ON_OFFLINE:\r\n      setAlertTimeout(state, ['warning', 'MQTT_ON_OFFLINE']);\r\n      return {...state, status: action.status};\r\n    case ACTIONS.TOGGLE_PAUSE:\r\n      setAlertTimeout(state, state.pause ? ['success', 'MQTT_PLAY'] : ['info', 'MQTT_PAUSE']);\r\n      return {...state, pause: !state.pause};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default function MqttProvider({ children }){\r\n  const [, setAlert, clearAlert] = React.useContext(AlertContext);\r\n  \r\n  \r\n  const [state, dispatch] = React.useReducer(mqttReducer, {\r\n    dispatch: null,\r\n    updateInterval: 100,\r\n    mqtt: null,\r\n    status: 'offline',\r\n    subscribedTo: {topic: '', qos: 0},\r\n    messages: [],\r\n    messagesCount: 0,\r\n    setAlert,\r\n    clearAlert,\r\n    pause: false\r\n  })\r\n  \r\n  React.useEffect(() => {\r\n    dispatch({type: ACTIONS.INIT, dispatch});\r\n    return () => {\r\n      if(mqtt && mqtt.connected) state.mqtt.end();\r\n    }\r\n  }, [state.mqtt])\r\n  return (\r\n      <MqttContext.Provider value={[state, dispatch]}>{children}</MqttContext.Provider>\r\n  )\r\n}","import { useState, useEffect} from 'react'\r\n\r\nconst PREFIX = process.env.REACT_APP_LOCAL_STORAGE_PREFIX.endsWith('-') ? \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX : \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX + '-';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key;\r\n\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n        return typeof initialValue === 'function' ? initialValue() : initialValue\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React from 'react';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport { MqttSettingContext } from 'hooks/context/Contexts';\r\n\r\nexport default function MqttSettingProvider({ children }){\r\n\r\n  const [mqttSetting, setMqttSetting] = useLocalStorage('mqttSetting', {\r\n    url: window.location.protocol === 'https:' ? 'wss://' : 'ws://',\r\n    clientId: `mqtt-ws-client-${Date.now().toString(36)}`,\r\n    anomynous: false,\r\n    username: '',\r\n    password: '',\r\n    topic: ['', 0],\r\n    subscribeTo: {topic: '', qos: 0, converter: 'default'},\r\n    publishTo: {topic: '', qos: 0},\r\n    locale: 'zhTW'\r\n  })\r\n\r\n  return <MqttSettingContext.Provider value={[mqttSetting, setMqttSetting]}>{children}</MqttSettingContext.Provider>\r\n}","import React from 'react';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport { AppSettingContext } from 'hooks/context/Contexts';\r\n\r\n\r\nconst userLang = (navigator.language || navigator.userLanguage).split('-').join(''); \r\n\r\nexport default function AppSettingProvider({ children }){\r\n  \r\n  const [appSetting, setAppSetting] = useLocalStorage('appSetting', {\r\n    locale: userLang,\r\n    darkMode: false,\r\n    filterOn: false,\r\n    filter: {\r\n      time: [null,null],\r\n      text: ['','']\r\n    }\r\n  })\r\n\r\n  return <AppSettingContext.Provider value={[appSetting, setAppSetting]}>{children}</AppSettingContext.Provider>\r\n}","import React from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nlet timeoutHandler = null;\r\n\r\nconst defaultMessages = {\r\n  MQTT_CONNECT: (url) => `Connecting to ${url}...`,\r\n  MQTT_CONNECT_TIMEOUT: 'Connection timeout.',\r\n  MQTT_DISCONNECT: 'Disconnecting...',\r\n  MQTT_SUBSCRIBE: (topic) => `Subscribing to ${topic}...`,\r\n  MQTT_SUBSCRIBE_FAIL: (topic) => `Can not subscribe to ${topic}`,\r\n  MQTT_UNSUBSCRIBE: (topic) => `Unsubscribing from ${topic}...`,\r\n  MQTT_PUBLISHED: 'Published succesfully.',\r\n  MQTT_ON_CONNECT: 'Connected.',\r\n  MQTT_ON_CLOSE: 'Connection closed.',\r\n  MQTT_ON_RECONNECT: 'Reconnecting...',\r\n  MQTT_ON_OFFLINE: 'MQTT Offlined.',\r\n  MQTT_PLAY: 'Updating messages...',\r\n  MQTT_PAUSE: 'Pause message.',\r\n  FILTER_INVALID_TIME_RANGE: 'Invalid time range.',\r\n  CONVERTER_INVALID: 'Selected converter function does not exist.'\r\n\r\n}\r\n\r\nexport default function AlertProvider({ children }){\r\n  const theme = useTheme();\r\n  const [alert, setAlert] = React.useState([]);\r\n  const setMessage = ([severity, errorCode, ...arg]) => {\r\n    clearTimeout(timeoutHandler);\r\n    const message = theme?.messages?.[errorCode] ?? \r\n      defaultMessages?.[errorCode] ?? \r\n      errorCode;\r\n    setAlert([severity, typeof message === 'function' ? message(arg) : message]);\r\n  }\r\n  const clearMessage = (timeout) => {\r\n    clearTimeout(timeoutHandler);\r\n    timeoutHandler = setTimeout(() => setAlert([]), timeout ?? 100);\r\n  }\r\n\r\n  return <AlertContext.Provider value={[alert, setMessage, clearMessage]}>{children}</AlertContext.Provider>\r\n}","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <h1 style={{margin: 'auto'}}>Oops! Something went wrong</h1>;\r\n      }\r\n  \r\n      return this.props.children;\r\n    }\r\n  }","import React from 'react';\r\nimport * as defaultLocales from '@material-ui/core/locale';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport * as locales from 'lib/i18n';\r\nimport { AppSettingContext } from 'hooks/context/Contexts';\r\nimport moment from \"moment\";\r\nimport 'moment/locale/zh-tw';\r\n\r\nmoment.locale('en');\r\n\r\nconst supportLocales = Object.keys(locales);\r\n\r\nexport default function AppThemeProvider(props) {\r\n    const {\r\n        children,\r\n    } = props;\r\n    const [appSetting, ] = React.useContext(AppSettingContext);\r\n\r\n    const theme = React.useMemo(\r\n      () => createMuiTheme({\r\n          supportLocales,\r\n          typography: {\r\n            fontFamily: '\"Roboto\", \"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif',\r\n          },\r\n          palette: {\r\n            type: appSetting.darkMode ? 'dark' : 'light',\r\n            primary: {\r\n              light: '#B5C7D3',\r\n              main: '#658DC6',\r\n              dark: '#0F4C81'\r\n            },\r\n            secondary: {\r\n              light: '#F2D6AE',\r\n              main: '#F5B895',\r\n              dark: '#A58D7F'\r\n            },\r\n          },\r\n          ...defaultLocales[appSetting.locale], \r\n          ...locales[appSetting.locale],\r\n          i18n: function(component, key, defaultText){ \r\n            return this.text?.[component]?.[key] ?? defaultText[key]\r\n          }\r\n        }),\r\n      [appSetting.darkMode, appSetting.locale]\r\n    );\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <MuiPickersUtilsProvider utils={MomentUtils} locale={`${appSetting.locale.substring(0, 2)}-${appSetting.locale.substring(2, 4)}`}>\r\n          {children}\r\n        </MuiPickersUtilsProvider>\r\n      </ThemeProvider>\r\n    );\r\n  }","import React from 'react'\r\nimport MqttProvider from 'hooks/context/MqttProvider';\r\nimport MqttSettingProvider from 'hooks/context/MqttSettingProvider';\r\nimport AppSettingProvider from 'hooks/context/AppSettingProvider';\r\nimport AlertProvider from 'hooks/context/AlertProvider';\r\nimport ErrorBoundary from 'errorBoundary/ErrorBoundary';\r\nimport AppThemeProvider from 'components/themes/AppThemeProvider';\r\n\r\nexport * from 'hooks/context/Contexts';\r\n\r\nexport default function AppContextProvider(props){\r\n    const {\r\n        children\r\n    } = props;\r\n    return (\r\n        <ErrorBoundary>\r\n            <AppSettingProvider>\r\n                <AppThemeProvider>\r\n                    <AlertProvider>\r\n                        <MqttSettingProvider>\r\n                            <MqttProvider>\r\n                                    { children }\r\n                            </MqttProvider>\r\n                        </MqttSettingProvider>\r\n                    </AlertProvider>\r\n                </AppThemeProvider>\r\n            </AppSettingProvider>\r\n        </ErrorBoundary>\r\n    )\r\n}","import React, { lazy, Suspense} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppContextProvider from 'hooks/AppContextProvider';\r\n\r\nconst App = lazy(() => import('./App'));\r\n\r\nReactDOM.render(\r\n  <AppContextProvider>\r\n    <Suspense fallback={<h3>Loading...</h3>}>\r\n      <App />\r\n    </Suspense>\r\n  </AppContextProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\n\r\nexport const AppSettingContext = React.createContext(null);\r\nexport const MqttSettingContext = React.createContext(null);\r\nexport const MqttContext = React.createContext(null);\r\nexport const AlertContext = React.createContext(null);","\r\nconst defaultShort = (data) => {\r\n    return {\r\n        topic: data.topic, \r\n        message: data.message.toString(), \r\n        qos: data.packet.qos, \r\n        time: Date.now()\r\n    }\r\n}\r\nconst defaultFull = (data) => {\r\n    return {\r\n        ...defaultShort(data),\r\n        retain: data.packet.retain.toString(), \r\n        dup: data.packet.dup.toString(), \r\n        cmd: data.packet.cmd,\r\n    }\r\n}\r\n\r\n/* \r\n    Example for new converter\r\n*/\r\n// const newConverter = (data) => {\r\n//     let result = defaultFull(data);\r\n\r\n//     // Add code here\r\n\r\n//     return result;\r\n// }\r\n\r\n/* \r\n    Table columns for the message table. If not defined, \"default\" will be used.\r\n*/\r\nconst columns = {\r\n    default: {\r\n        time: 'Time',\r\n        topic: 'Topic',\r\n        qos: 'QoS',\r\n        message: 'Message'\r\n    }\r\n}\r\n\r\n/* \r\n    Table columns for the collapsed table. If not defined, there won't be collapsed section. \r\n*/\r\nconst collpasedColumns = {\r\n    defaultFull: {\r\n        cmd: 'Command',\r\n        retain: 'Retained',\r\n        dup: 'Duplicate',\r\n    }\r\n}\r\n\r\n/* \r\n    Exported converter functions called by the MqttProvider.\r\n    - key: external function name\r\n    - value: internal function name\r\n*/\r\nconst messageConverter = {\r\n    default: defaultShort,\r\n    defaultFull\r\n}\r\n\r\n/* \r\n    Select options for converter.\r\n    - value: key for messageConverter\r\n    - label: display name\r\n*/\r\nconst types = [\r\n    {value: 'default', label: 'Default'},\r\n    {value: 'defaultFull', label: 'Default(Full)'},\r\n    {value: 'test', label: 'test'}, // Test option for absence of the converter function.\r\n]\r\n\r\nexport { messageConverter, columns, collpasedColumns, types };"],"sourceRoot":""}