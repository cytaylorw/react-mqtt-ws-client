{"version":3,"sources":["lib/i18n/zhTW.js","lib/i18n/enUS.js","serviceWorker.js","hooks/context/MqttProvider.js","hooks/useLocalStorage.js","hooks/context/MqttSettingProvider.js","hooks/context/AppSettingProvider.js","hooks/context/AlertProvider.js","errorBoundary/ErrorBoundary.js","components/themes/AppThemeProvider.js","hooks/AppContextProvider.js","index.js","lib/converter/MessageConverter.js","hooks/context/Contexts.js"],"names":["exports","zhTW","props","MuiBreadcrumbs","expandText","MuiTablePagination","backIconButtonText","labelRowsPerPage","labelDisplayedRows","from","to","count","nextIconButtonText","MuiRating","getLabelText","value","emptyLabelText","MuiAutocomplete","clearText","closeText","loadingText","noOptionsText","openText","MuiAlert","MuiPagination","getItemAriaLabel","type","page","selected","text","MuiMqttCommon","connect","disconnect","subscribe","unsubscribe","publish","MuiConfigActions","settings","enUS","Boolean","window","location","hostname","match","ACTIONS","messageBuffer","messages","timeoutHandle","connectTimeout","mqttReducer","state","action","last","length","push","messageConverter","subscribedTo","converter","pause","setTimeout","dispatch","updateInterval","newMessages","shift","messagesCount","mqtt","connected","end","mqttSetting","setting","instance","url","username","anonymous","undefined","password","reconnectPeriod","on","status","error","topic","message","packet","setAlert","console","log","JSON","stringify","subscribeTo","qos","granted","clearAlert","publishTo","clearTimeout","MqttProvider","children","React","useContext","AlertContext","useReducer","useEffect","Provider","PREFIX","process","endsWith","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","parse","setValue","setItem","MqttSettingProvider","protocol","clientId","Date","now","toString","anomynous","locale","setMqttSetting","userLang","navigator","language","userLanguage","split","join","AppSettingProvider","filter","time","appSetting","setAppSetting","AlertProvider","alert","timeout","ErrorBoundary","hasError","errorInfo","this","style","margin","Component","moment","supportLocales","Object","keys","locales","defaultTheme","createMuiTheme","typography","fontFamily","AppThemeProvider","AppSettingContext","theme","defaultLocales","i18n","component","defaultText","ThemeProvider","utils","MomentUtils","substring","AppContextProvider","App","lazy","ReactDOM","render","fallback","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","defaultShort","data","columns","default","collpasedColumns","defaultFull","cmd","retain","dup","types","label","createContext","MqttSettingContext","MqttContext"],"mappings":"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","file":"static/js/main.72fe6b0c.chunk.js","sourcesContent":["exports.zhTW = {\r\n    props: {\r\n      MuiBreadcrumbs: {\r\n        expandText: '顯示路徑',\r\n      },\r\n      MuiTablePagination: {\r\n        backIconButtonText: '上一頁',\r\n        labelRowsPerPage: '每頁筆數：',\r\n        labelDisplayedRows: ({ from, to, count }) =>\r\n    `${from}-${to}  共${count !== -1 ? count : `大於 ${to}`}`,\r\n        nextIconButtonText: '下一頁',\r\n      },\r\n      MuiRating: {\r\n        getLabelText: value => `${value}星`,\r\n        emptyLabelText: '無',\r\n      },\r\n      MuiAutocomplete: {\r\n        clearText: '清除',\r\n        closeText: '關閉',\r\n        loadingText: '載入中…',\r\n        noOptionsText: '無選項',\r\n        openText: '開啟',\r\n      },\r\n      MuiAlert: {\r\n        closeText: '關閉',\r\n      },\r\n      MuiPagination: {\r\n        'aria-label': '分頁導覽',\r\n        getItemAriaLabel: (type, page, selected) => {\r\n          if (type === 'page') {\r\n            return `第${page}頁`;\r\n          }\r\n          if (type === 'first') {\r\n            return '第一頁';\r\n          }\r\n          if (type === 'last') {\r\n            return '最後一頁';\r\n          }\r\n          if (type === 'next') {\r\n            return '下一頁';\r\n          }\r\n          if (type === 'previous') {\r\n            return '上一頁';\r\n          }\r\n          return undefined;\r\n        },\r\n      },\r\n    },\r\n    text: {\r\n      MuiMqttCommon: {\r\n        connect: '連線',\r\n        disconnect: '中斷連線',\r\n        subscribe: '訂閱',\r\n        unsubscribe: '取消訂閱',\r\n        publish: '發布',\r\n      },\r\n      MuiConfigActions: {\r\n        settings: '設定'\r\n      }\r\n    }\r\n  };","exports.enUS = {\r\n    // text: {\r\n    //   MqttCommon: {\r\n    //     connect: 'Connect',\r\n    //     disconnect: 'Disconnect',\r\n    //     subscribe: 'Subscribe',\r\n    //     unsubscribe: 'Unsubscribe',\r\n    //     publish: 'Publish',\r\n    //   },\r\n    //   ConfigActions: {\r\n    //     settings: 'Settings'\r\n    //   },\r\n    //   MessageTable: {\r\n    //     rowsPerPage: 'rows per page'\r\n    //   }\r\n    // },\r\n\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport mqtt from 'mqtt';\r\nimport { AlertContext,  MqttContext} from 'hooks/context/Contexts';\r\nimport { messageConverter } from 'lib/converter/MessageConverter';\r\n\r\nconst ACTIONS = {\r\n  INIT: 'init',\r\n  CONNECT: 'connect',\r\n  SUBSCRIBE: 'subscribe',\r\n  SUBSCRIBED: 'subscribed',\r\n  UNSUBSCRIBE: 'unsubscribe',\r\n  UNSUBSCRIBED: 'unsubscribed',\r\n  PUBLISH: 'publish',\r\n  DISCONNECT: 'disconnect',\r\n  ON_CONNECT: 'onConnect',\r\n  ON_RECONNECT: 'onReconnect',\r\n  ON_CLOSE: 'onClose',\r\n  ON_OFFLINE: 'onOffline',\r\n  ON_ERROR: 'onError',\r\n  ON_MESSAGE: 'onMessage',\r\n  UPDATE_STATUS: 'updateStatus',\r\n  UPDATE_MESSAGES: 'updateMessages',\r\n  TOGGLE_PAUSE: 'togglePause',\r\n}\r\n\r\nlet messageBuffer = [{messages: []}];\r\nlet timeoutHandle = null;\r\nlet connectTimeout = null;\r\n\r\nconst mqttReducer = (state, action) => {\r\n  switch(action.type){\r\n    case ACTIONS.ON_MESSAGE:\r\n      const last = messageBuffer.length - 1;\r\n      messageBuffer[last].messages.push(messageConverter[state.subscribedTo.converter](action));\r\n      if(!timeoutHandle && !state.pause){\r\n        timeoutHandle = setTimeout(() => state.dispatch({type: ACTIONS.UPDATE_MESSAGES}), state.updateInterval)\r\n      }\r\n      return state;\r\n    case ACTIONS.UPDATE_MESSAGES:\r\n      messageBuffer.push({messages: []});\r\n      timeoutHandle = null;\r\n      const newMessages = messageBuffer[0].messages;\r\n      messageBuffer.shift();\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, ...newMessages],\r\n        messagesCount: state.messagesCount+newMessages.length\r\n      };\r\n    case ACTIONS.INIT:\r\n      return {...state, dispatch: action.dispatch};\r\n    case ACTIONS.CONNECT:\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      const mqttSetting = action.setting;\r\n      try {        \r\n        const instance = mqtt.connect(mqttSetting.url, {\r\n          ...mqttSetting,\r\n          username: mqttSetting.anonymous ? undefined : mqttSetting.username,\r\n          password: mqttSetting.anonymous ? undefined : mqttSetting.password,\r\n          reconnectPeriod: 0\r\n        });\r\n        instance.on('connect', () => state.dispatch({type: ACTIONS.ON_CONNECT, status: 'connected'}));\r\n        instance.on('reconnect', () => state.dispatch({type: ACTIONS.ON_RECONNECT, status: 'reconnecting'}));\r\n        instance.on('close', () => state.dispatch({type: ACTIONS.ON_CLOSE, status: 'closed'}));\r\n        instance.on('offline', () => state.dispatch({type: ACTIONS.ON_OFFLINE, status: 'offline'}));\r\n        instance.on('error', (error) => state.dispatch({type: ACTIONS.ON_ERROR, error}));\r\n        instance.on('message', (topic, message, packet) => state.dispatch({type: ACTIONS.ON_MESSAGE, topic, message, packet}));\r\n        state.setAlert(['info', `Connecting to ${mqttSetting.url}...`])\r\n        connectTimeout = setTimeout(() => state.setAlert(['error', `Connection timeout.`]), 5000)\r\n        return {...state, mqtt:instance};\r\n      } catch (error) {\r\n        console.log(JSON.stringify(error))\r\n        state.setAlert(['error', error])\r\n        return state;\r\n      }\r\n    case ACTIONS.DISCONNECT:\r\n      state.setAlert(['info', `Disconnecting...`]);\r\n      if(state.mqtt && state.mqtt.connected) state.mqtt.end();\r\n      state.dispatch({type: ACTIONS.UNSUBSCRIBED});\r\n      return state;\r\n    case ACTIONS.SUBSCRIBE:\r\n      if(!state.subscribedTo.topic){\r\n        state.setAlert(['info', `Subscribing to ${state.subscribedTo.topic}...`]);\r\n        const topic = {[action.setting.subscribeTo.topic]: {qos: action.setting.subscribeTo.qos}};\r\n        state.mqtt.subscribe(topic, (error, granted) => {\r\n          if(error){\r\n            state.setAlert(['error', error]);\r\n          }else if(granted[0].qos > 2){\r\n            state.setAlert(['error', 'Failed to subscribe topic.']);\r\n          }else{\r\n            state.dispatch({type: ACTIONS.SUBSCRIBED, granted: {...granted[0], converter: action.setting.subscribeTo.converter}})\r\n          }\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.SUBSCRIBED:\r\n      state.clearAlert();\r\n      return {...state, subscribedTo: action.granted};\r\n    case ACTIONS.UNSUBSCRIBE:\r\n      if(state.subscribedTo.topic){\r\n        state.setAlert(['info', `Unsubscribing from ${state.subscribedTo.topic}...`]);\r\n        state.mqtt.unsubscribe(state.subscribedTo.topic, (error) => {\r\n          if(error){\r\n            state.setAlert(['error', error]);\r\n          }else{\r\n            state.dispatch({type: ACTIONS.UNSUBSCRIBED})\r\n          }\r\n        });\r\n      }\r\n      return state;\r\n    case ACTIONS.UNSUBSCRIBED:\r\n      state.clearAlert();\r\n      return {...state, subscribedTo: {...state.subscribedTo, topic: '', qos: 0}};\r\n    case ACTIONS.PUBLISH:\r\n      state.mqtt.publish(\r\n          action.setting.publishTo.topic, \r\n          action.setting.publishTo.message, \r\n          {qos: action.setting.publishTo.qos}, \r\n          (error) => {\r\n            if(error){\r\n              state.setAlert(['error', error]);\r\n            }else{\r\n              state.setAlert(['success', 'Published']);\r\n              state.clearAlert(1000);\r\n            }\r\n      })\r\n      return state;\r\n    case ACTIONS.ON_ERROR:\r\n      console.log(action.error);\r\n      return {...state, error: action.error};\r\n    case ACTIONS.UPDATE_STATUS:\r\n    case ACTIONS.ON_CONNECT:\r\n      state.clearAlert();\r\n      clearTimeout(connectTimeout);\r\n      /* falls through */\r\n    case ACTIONS.ON_RECONNECT:\r\n    case ACTIONS.ON_CLOSE:\r\n    case ACTIONS.ON_OFFLINE:\r\n      return {...state, status: action.status};\r\n      case ACTIONS.TOGGLE_PAUSE:\r\n      return {...state, pause: !state.pause};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default function MqttProvider({ children }){\r\n  const [, setAlert, clearAlert] = React.useContext(AlertContext);\r\n  \r\n  \r\n  const [state, dispatch] = React.useReducer(mqttReducer, {\r\n    dispatch: null,\r\n    updateInterval: 100,\r\n    mqtt: null,\r\n    status: 'offline',\r\n    subscribedTo: {topic: '', qos: 0},\r\n    messages: [],\r\n    messagesCount: 0,\r\n    setAlert,\r\n    clearAlert,\r\n    pause: false\r\n  })\r\n  \r\n  React.useEffect(() => {\r\n    dispatch({type: ACTIONS.INIT, dispatch});\r\n    return () => {\r\n      if(mqtt && mqtt.connected) state.mqtt.end();\r\n    }\r\n  }, [state.mqtt])\r\n  return (\r\n      <MqttContext.Provider value={[state, dispatch]}>{children}</MqttContext.Provider>\r\n  )\r\n}","import { useState, useEffect} from 'react'\r\n\r\nconst PREFIX = process.env.REACT_APP_LOCAL_STORAGE_PREFIX.endsWith('-') ? \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX : \r\n                process.env.REACT_APP_LOCAL_STORAGE_PREFIX + '-';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key;\r\n\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n        return typeof initialValue === 'function' ? initialValue() : initialValue\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React from 'react';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport { MqttSettingContext } from 'hooks/context/Contexts';\r\n\r\nexport default function MqttSettingProvider({ children }){\r\n\r\n  const [mqttSetting, setMqttSetting] = useLocalStorage('mqttSetting', {\r\n    url: window.location.protocol === 'https:' ? 'wss://' : 'ws://',\r\n    clientId: `mqtt-ws-client-${Date.now().toString(36)}`,\r\n    anomynous: false,\r\n    username: '',\r\n    password: '',\r\n    topic: ['', 0],\r\n    subscribeTo: {topic: '', qos: 0, converter: 'default'},\r\n    publishTo: {topic: '', qos: 0},\r\n    locale: 'zhTW'\r\n  })\r\n\r\n  return <MqttSettingContext.Provider value={[mqttSetting, setMqttSetting]}>{children}</MqttSettingContext.Provider>\r\n}","import React from 'react';\r\nimport useLocalStorage from 'hooks/useLocalStorage';\r\nimport { AppSettingContext } from 'hooks/context/Contexts';\r\n\r\nconst userLang = (navigator.language || navigator.userLanguage).split('-').join(''); \r\n\r\nexport default function AppSettingProvider({ children }){\r\n\r\n  const [appSetting, setAppSetting] = useLocalStorage('appSetting', {\r\n    locale: userLang,\r\n    filter: {\r\n      time: [null,null],\r\n      text: ['','']\r\n    }\r\n  })\r\n\r\n  return <AppSettingContext.Provider value={[appSetting, setAppSetting]}>{children}</AppSettingContext.Provider>\r\n}","import React from 'react';\r\nimport { AlertContext } from 'hooks/context/Contexts';\r\n\r\nexport default function AlertProvider({ children }){\r\n\r\n  const [alert, setAlert] = React.useState([]);\r\n  const clearAlert = (timeout) => {\r\n    setTimeout(() => setAlert([]), timeout ? timeout : 100);\r\n  }\r\n\r\n  return <AlertContext.Provider value={[alert, setAlert, clearAlert]}>{children}</AlertContext.Provider>\r\n}","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error) {\r\n      return { hasError: true };\r\n    }\r\n  \r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <h1 style={{margin: 'auto'}}>Oops! Something went wrong</h1>;\r\n      }\r\n  \r\n      return this.props.children;\r\n    }\r\n  }","import React from 'react';\r\nimport * as defaultLocales from '@material-ui/core/locale';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport * as locales from 'lib/i18n';\r\nimport { AppSettingContext } from 'hooks/context/Contexts';\r\nimport moment from \"moment\";\r\nimport 'moment/locale/zh-tw';\r\n\r\nmoment.locale('en');\r\n\r\nconst supportLocales = Object.keys(locales);\r\n\r\nconst defaultTheme = createMuiTheme({\r\n    supportLocales,\r\n    typography: {\r\n      fontFamily: '\"Roboto\", \"Noto Sans TC\", \"Helvetica\", \"Arial\", sans-serif'\r\n    }\r\n});\r\n\r\nexport default function AppThemeProvider(props) {\r\n    const {\r\n        children,\r\n    } = props;\r\n    const [appSetting, ] = React.useContext(AppSettingContext);\r\n    const theme = createMuiTheme(defaultTheme, {\r\n      ...defaultLocales[appSetting.locale], \r\n      ...locales[appSetting.locale],\r\n      i18n: function(component, key, defaultText){ \r\n        return this.text && this.text[component] && this.text[component][key] ? this.text[component][key] : defaultText[key]\r\n      }\r\n    });\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <MuiPickersUtilsProvider utils={MomentUtils} locale={`${appSetting.locale.substring(0, 2)}-${appSetting.locale.substring(2, 4)}`}>\r\n          {children}\r\n        </MuiPickersUtilsProvider>\r\n      </ThemeProvider>\r\n    );\r\n  }","import React from 'react'\r\nimport MqttProvider from 'hooks/context/MqttProvider';\r\nimport MqttSettingProvider from 'hooks/context/MqttSettingProvider';\r\nimport AppSettingProvider from 'hooks/context/AppSettingProvider';\r\nimport AlertProvider from 'hooks/context/AlertProvider';\r\nimport ErrorBoundary from 'errorBoundary/ErrorBoundary';\r\nimport AppThemeProvider from 'components/themes/AppThemeProvider';\r\n\r\nexport * from 'hooks/context/Contexts';\r\n\r\nexport default function AppContextProvider(props){\r\n    const {\r\n        children\r\n    } = props;\r\n    return (\r\n        <ErrorBoundary>\r\n            <AppSettingProvider>\r\n                <AppThemeProvider>\r\n                    <AlertProvider>\r\n                        <MqttSettingProvider>\r\n                            <MqttProvider>\r\n                                    { children }\r\n                            </MqttProvider>\r\n                        </MqttSettingProvider>\r\n                    </AlertProvider>\r\n                </AppThemeProvider>\r\n            </AppSettingProvider>\r\n        </ErrorBoundary>\r\n    )\r\n}","import React, { lazy, Suspense} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppContextProvider from 'hooks/AppContextProvider';\r\n\r\nconst App = lazy(() => import('./App'));\r\n\r\nReactDOM.render(\r\n  <AppContextProvider>\r\n    <Suspense fallback={<h3>Loading...</h3>}>\r\n      <App />\r\n    </Suspense>\r\n  </AppContextProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","\r\n\r\n\r\nconst defaultShort = (data) => {\r\n    return {\r\n        topic: data.topic, \r\n        message: data.message.toString(), \r\n        qos: data.packet.qos, \r\n        time: Date.now()\r\n    }\r\n}\r\nconst defaultFull = (data) => {\r\n    return {\r\n        ...defaultShort(data),\r\n        retain: data.packet.retain.toString(), \r\n        dup: data.packet.dup.toString(), \r\n        cmd: data.packet.cmd,\r\n    }\r\n}\r\n\r\nconst columns = {\r\n    default: {\r\n        time: 'Time',\r\n        topic: 'Topic',\r\n        qos: 'QoS',\r\n        message: 'Message'\r\n    }\r\n}\r\n\r\nconst collpasedColumns = {\r\n    defaultFull: {\r\n        cmd: 'Command',\r\n        retain: 'Retained',\r\n        dup: 'Duplicate',\r\n    }\r\n}\r\n\r\nconst messageConverter = {\r\n    default: defaultShort,\r\n    defaultFull\r\n}\r\n\r\nconst types = [\r\n    {value: 'default', label: 'Default'},\r\n    {value: 'defaultFull', label: 'Default(Full)'},\r\n    {value: 'test', label: 'test'},\r\n]\r\n\r\nexport { messageConverter, columns, collpasedColumns, types };","import React from 'react';\r\n\r\nexport const AppSettingContext = React.createContext(null);\r\nexport const MqttSettingContext = React.createContext(null);\r\nexport const MqttContext = React.createContext(null);\r\nexport const AlertContext = React.createContext(null);"],"sourceRoot":""}